/*
 * 遅延起動ダイアログ類
 */


// トラックバーダイアログ
class TrackBarsDialog extends WIN32DialogEX {
	function finalize() { super.finalize(...); }
	function TrackBarsDialog() {
		super.WIN32DialogEX(...);
//		(global.Dictionary.assign incontextof template)(defaultDialogTemplate, false);
	}
	var tbInfo = [];
	var tbWins = %[];
	function open() {
		var r = super.open(...);
		if (r !== void && r.result == IDOK) onApply(r.items);
		else onCancel();
	}
	function onInit() {
		super.onInit(...);
		setCenterPosition();
		setItemFocus(IDOK);
		for (var i = 0; i < tbInfo.count; i++) {
			var info = tbInfo[i];
			var id = info.id;
			tbWins[id] = getItem(id);
			sendItemMessage(id, TBM_SETRANGEMIN, 0, 0);
			sendItemMessage(id, TBM_SETRANGEMAX, 0, info.max);
			sendItemMessage(id, TBM_SETTICFREQ,  info.step, 0);
		}
	}
	function store() {
		super.store(...);
		this.IDINIT = getNumberdId("init");
	}
	function onCommand(msg, wp, lp) {
		if (wp == this.IDINIT) {
			onSetDefaultParams();
			return true;
		}
		return super.onCommand(...);
	}
	function getDialogText(tag, defval) {
		var get = typeof global.GetSystemConfigItem == "Object" ? GetSystemConfigItem : function (a,b) { return b; };
		this.getDialogText = get;
		return get(...);
	}
	function addOkCancelButtons(bx = 0) {
		var add = template.items.add;
		var cx = template.cx, cy = template.cy;
		var get = getDialogText;
		add(PushButton(   get("DialogInit",   "初期設定"),   "init",    bx+cx-180, cy-22, 50, 15));
		add(DefPushButton(get("DialogOK",     "OK"),         IDOK,      bx+cx-120, cy-22, 50, 15));
		add(PushButton(   get("DialogCancel", "キャンセル"), IDCANCEL,  bx+cx-60,  cy-22, 50, 15));
	}
	function addGroupBox(*) { template.items.add(GroupBox(*)); }
	function addButton(*)   { template.items.add(PushButton(*)); }
	function addTrackBar(text, id, x, y, w1, w2, min="MIN", max="MAX") {
		var add = template.items.add;
		var fh = template.pointSize, h = 20, w = 16;
		var ts = WS_VISIBLE|WS_TABSTOP|TBS_HORZ|TBS_AUTOTICKS;
		add(LText(text,,  x, y+3, w1, fh));
		add(RText(min,, x+w1, y+3, w, fh));
		add(Control("", id, TRACKBAR, ts, x+w1+w, y, w2, h));
		add(LText(max,, x+w1+w+w2, y+3, w, fh));
	}
	function onHScroll(msg, wp, lp) {
		for (var i = 0; i < tbInfo.count; i++) {
			var info = tbInfo[i], id;
			if (info !== void && lp == tbWins[(id = info.id)])
				onTrackBarChanged(id, getTrackBar(id));
		}
		return super.onHScroll(...);
	}
	function makeResults() {
		super.makeResults(...);
		for (var i = 0; i < tbInfo.count; i++) {
			var info = tbInfo[i], id;
			if (info !== void && (id = info.id) != "")
				itemResults[id] = getTrackBar(id);
		}
	}
	function setTrackBar(id, pos) { sendItemMessage(id, TBM_SETPOS, true, pos); }
	function getTrackBar(id)      { return sendItemMessage(id, TBM_GETPOS, 0, 0); }

	function onTrackBarChanged(id, pos) {}
	function onSetDefaultParams() {}
	function onApply(dic) {}
	function onCancel() {}
}

// 中間で拡大ダイアログ
class MiddleZoomValueDialog extends TrackBarsDialog {
	var template = %[
	title:"拡大割合指定",
	x:0, y:0, cx:250, cy:106-15,
	style:DS_MODALFRAME|DS_CENTER|WS_POPUP|WS_CAPTION|WS_SYSMENU|DS_SETFONT,
	pointSize:9,
	typeFace:"ＭＳ ゴシック",
	weight:FW_NORMAL,
	items:[],
		];
	var argtag = "mzpercent";
	var track, oldper;
	var canpreview, idpreview;
	function finalize() {
		super.finalize(...);
	}
	function MiddleZoomValueDialog() {
		super.TrackBarsDialog(...);
		var ox = 16, oy = 20, cx = template.cx, cy = template.cy;
		var bx = ox+200, by = oy+1, bw = 20, bh = 12;
		addGroupBox("中間で拡大",, ox - 10, oy - 15, cx-12, 71-15);
		addTrackBar("拡大率", "track", ox, oy, 40, 140, "内接", "外接");
		template.items.add(AutoCheckBox("プレビュー", "preview", ox, oy+25, 100, 12));
		addOkCancelButtons();
		store(template);
		tbInfo.add(%[ id:"track", max:100, step:25 ]);
		with (kag) canpreview = (.maximized && (.pseudoFullScreened ||
												System.getArgument("-maximizezoom") == "fszoom"));
	}
	function store() {
		super.store(...);
		idpreview = getNumberdId("preview");
	}
	function onInit() {
		var r = super.onInit(...);
		var now = oldper = System.getArgument("-"+argtag);
		if (now == "" || now < 0) now = 50;
		else if (now > 100) now = 100;
		setTrackBar("track", (int)now);
		setItemEnabled("preview", canpreview);
		setCheckBox("preview", canpreview);
		return r;
	}
	function onSetDefaultParams() {
		var def = 50;
		setTrackBar("track", def);
		setZoom(def);
	}
	function onCommand(msg, wp, lp) {
		if (wp == idpreview) {
			setZoom(getTrackBar("track")) if (getCheckBox("preview"));
			return true;
		}
		return super.onCommand(...);
	}
	function onTrackBarChanged(id, pos) { setZoom(pos); }
	function onCancel() { setZoom(oldper, true); }
	function onApply(dic) {
		var val = (string)dic.track;
		setZoom(val, true);
		changeUserConf(argtag, val);
	}
	function setZoom(zoom, preview = getCheckBox("preview")) {
		System.setArgument("-"+argtag, (string)zoom);
		runOnceDelayedTrigger(kag.onResize) if (preview);
	}
}


// パッド割り当てダイアログ
class GamePadBindDialog extends TrackBarsDialog {
	var template = %[
	title:getDialogText("GamePadBindDialogCaption", "ゲームパッド割り当て変更"),
	x:0, y:0, cx:200, cy:255,
	style:DS_MODALFRAME|DS_CENTER|WS_POPUP|WS_CAPTION|WS_SYSMENU|DS_SETFONT,
	pointSize:getDialogText("GamePadBindDialogFontSize", 9),
	typeFace:getDialogText("GamePadBindDialogFontFace", "ＭＳ ゴシック"),
	weight:FW_NORMAL,
	items:[],
		];
	var bindList = [
		"none:なし",
		"return:リターン(Enter)キー",
		"escape:ESCキー",
		"space:スペースキー",
		"control:Ctrlキー",
		"prior:PageUpキー",
		"next:PageDownキー",
		"f1:F1キー",
		"f2:F2キー",
		"f3:F3キー",
		"f4:F4キー",
		"f5:F5キー",
		"f6:F6キー",
		"f7:F7キー",
		"f8:F8キー",
		"f9:F9キー",
		"f10:F10キー",
		"f11:F11キー",
		"f12:F12キー",
		];
	var bindIndexToTag =  [];
	var bindTagToIndex = %[];
	var bindVkToTag    = %[];
	function finalize() {
		super.finalize(...);
	}
	function GamePadBindDialog() {
		super.TrackBarsDialog(...);
		var ox = 16, oy = 20, cx = template.cx, cy = template.cy;
		var bx = ox+200, by = oy+1, bw = 20, bh = 12;
		addGroupBox(getDialogText("GamePadBindDialogHeader", "ゲームパッドボタン"),, ox - 10, oy - 15, cx-12, cy-35);

		var combo = [];
		var list = getDialogText("GamePadBindDialogList", bindList);
		list = global.padBindListOverride if (typeof global.padBindListOverride == "Object");
		for (var i = 0; i <list.count; i++) {
			var bind = list[i];
			if (bind == "") continue;
			var div = bind.split(":", true);
			if (div[0] == "") continue;

			combo.add(div[1]);
			bindIndexToTag.add(div[0]);
			bindTagToIndex[div[0]] = i;

			var tag = "VK_"+div[0].toUpperCase();
			bindVkToTag[global[tag]] = div[0] if (typeof global[tag] == "Integer");
		}
		var selected = %[];
		var initParams = %[];
		var lw = 40, lh = 10, lp = 3;
		var cw = 100, ch = 200;
		var add = template.items.add;
		var fmt = getDialogText("GamePadBindDialogFormat", "ボタン%2d");
		if (typeof fmt == "String") fmt = function(n) { return format.sprintf(n); } incontextof %[ format:fmt ];
		for (var i = 0; i < 10; i++) {
			var id = "pad"+i;
			var y = oy + i*20;
			add(RText(fmt(i+1),, ox, y+lp, lw, lh));
			add(ComboBox(id, ox+lw+lp, y, cw, ch, CBS_DROPDOWNLIST|WS_VSCROLL|WS_TABSTOP));
			selected[id]    = %[ selectComboBox: +bindTagToIndex[getKagBindTag(i)] ];
			initParams[id]  = [ %[ setComboBoxTexts: combo ], selected[id] ];
		}
		addOkCancelButtons();
		store(template);
		setInitParams(initParams);
	}
	function getKagBindTag(num, isDefault = false) {
		var sel = isDefault ? kag.initialPadKeyMap : kag.padKeyMap;
		var map = sel[VK_PAD1 + num];
		var ret = (map != "") ? bindVkToTag[map] : void;
		return (ret == "") ? "none" : ret;
	}
	function onSetDefaultParams() {
		for (var i = 0; i < 10; i++) {
			var id = "pad"+i;
			selectComboBox(id, +bindTagToIndex[getKagBindTag(i, true)]);
		}
	}
	function onCancel() {}
	function onApply(dic) {
		var modified = false;
		for (var i = 0; i < 10; i++) {
			var id = "pad"+i;
			var tag = bindIndexToTag[dic[id]];
			if (tag != getKagBindTag(i)) {
				modified = true;
				var sysarg = "padbtn"+(i+1);
				System.setArgument("-"+sysarg, tag);
				changeUserConf(sysarg, tag);
			}
		}
		kag.createPadKeyMap() if (modified);
	}
}

// テキストを表示するのみのダイアログ
// (new MyNoticeTextDialog(%[ title, width, height, text:[], {size,face,status,center} ])).open(parent)
class        MyNoticeTextDialog      extends WIN32DialogEX {
	function MyNoticeTextDialog(elm) { super.WIN32DialogEX(elm);
		var templ = %[
		style:DS_MODALFRAME|DS_CENTER|WS_POPUP|WS_CAPTION|WS_SYSMENU|DS_SETFONT,
		x:0, y:0, cx:elm.width, cy:elm.height,
		title:elm.title,
		pointSize:(elm.size > 0) ? (int)+elm.size : 9,
		typeFace:(elm.face != "") ? elm.face : "ＭＳ ゴシック",
		weight:FW_NORMAL,
		items: []
			];

		var x = templ.cx, y = templ.cy, mul = templ.pointSize/12;
		var add = templ.items.add;
		var cx = (templ.cx = (int)(x*mul));
		var cy = (templ.cy = (int)(y*mul));
		add(EditText("Text", 0, 0, cx, cy-16,
					 ES_LEFT|ES_MULTILINE|ES_WANTRETURN|ES_READONLY|
					 ES_AUTOVSCROLL|ES_AUTOHSCROLL|
					 WS_VSCROLL|WS_HSCROLL|
					 WS_BORDER|WS_TABSTOP));
		add(LText((string)elm.status, -1,       1, cy-15, cx\2-4, 14));
		var close = SystemConfig.DialogCloseText;
		if (close == "") close = "閉じる";
		add(DefPushButton(close,   IDCANCEL, cx*3\4-1, cy-15, cx\4, 14));

		store(templ);

		text = elm.text.join("\r\n");
		center = elm.center;
	}
	function finalize() { super.finalize(...); }

	var text, center;
	function onInit() {
		super.onInit(...);
		setCenterPosition() if (center);
		setItemText("Text", text);
		setItemFocus("Text"); //IDCANCEL);
	}
}
class        MyNoticeTextModelessDialog extends MyNoticeTextDialog {
	function MyNoticeTextModelessDialog { super.MyNoticeTextDialog(...); modeless = true; }
	function finalize() {
		if (isvalid this && _opened) close(IDCANCEL);
		super.finalize(...);
	}
	function open(win) {
		_parent = win;
		visible = true;
	}
	var _visible = false, _parent = void, _opened = false;
	property visible {
		getter { return _visible; }
		setter(v) {
			if ((v = !!v) != _visible) {
				_visible = v;
				if (v && !_opened) {
					_opened = true;
					super.open(_parent);
				}
				show(v ? SW_SHOW : SW_HIDE);
			}
		}
	}
	function defaultCommand(msg, wp, lp) {
		if (wp == IDCANCEL) {
			visible = false;
			return true;
		}
		return super.defaultCommand(...);
	}
}

// フォント選択ダイアログ
class MyFontSelectDialog extends WIN32GenericDialogEX {
	var fontList, itemHeight = 30, initialSelect, iniPrompt, curPrompt;
	var layerCreated, bitmap, bmpLayer, fontLayer;
	function finalize() {
		invalidate bitmap    if (bitmap    !== void);
		invalidate bmpLayer  if (bmpLayer  !== void);
		invalidate fontLayer if (fontLayer !== void);
		super.finalize(...);
	}
	function getConfigText(name, def) { return SystemConfig[name] != "" ? SystemConfig[name] : def; }
	function MyFontSelectDialog(lay, face, flags, caption, prompt, sample) {
		var tagOK = getConfigText("FontDialogOK",     "OK");
		var tagNG = getConfigText("FontDialogCancel", "キャンセル");


		super.WIN32GenericDialogEX(%[ title:caption, width:200, itemtexts:%[ IDOK=>tagOK, IDCANCEL=>tagNG], fontFace:getConfigText("FontDialogFace") ]);
		fontLayer = new KAGLayer(lay.window, lay);
		bmpLayer  = new Layer(lay.window, lay);
		bitmap    = new global.WIN32Dialog.Bitmap(bmpLayer);

		addLText(iniPrompt = curPrompt = prompt, void, void, "Prompt");
		nextLine();

		fontList = [];
		fontList.assign(lay.font.getList(flags));
		fontList.sort();

		initialSelect = getInitialSelect(face);
		initialSelect = 0 if (initialSelect < 0);

		var selheight = SystemConfig.FontDialogHeight > 0 ? (int)SystemConfig.FontDialogHeight : 150;
		addListSelect("Select", selheight, void, void, fontList);
		addInit(      "Select", "setItemHeight", itemHeight);
		getLastItem().style |= (LBS_OWNERDRAWFIXED | WS_VSCROLL);
		nextLine();

		addDefPush(IDOK,    makeStepRight(1, 60), 8);
		addButton(IDCANCEL, makeStepRight(0, 60), 8);
	}
	function getInitialSelect(face) {
		face = (string)face;
		if (face.indexOf(",") < 0) return fontList.find(face);
		var div = face.split(",",, true);
		for (var i = 0; i < div.count; i++) {
			var r = getInitialSelect(div[i]);
			if (r >= 0) return r;
		}
		return -1;
	}
	function onInit() {
		super.onInit(...);
		setCenterPosition();
		setItemFocus( "Select");
		selectListBox("Select", initialSelect);
	}
	function onCommand(msg, wp, lp) {
		var proc, notify = wp >>16;
		switch (getNamedId(wp & 0xFFFF)) {
		case "Select": return onSelectCommand(notify, lp); break;
		}
		return super.onCommand(...);
	}
	function setItemHeight(id, h) {
		sendItemMessage(id, LB_SETITEMHEIGHT, 0, h);
	}
	function onSelectCommand(notify, lp) {
		switch (notify) {
		case LBN_DBLCLK:
			close(IDOK);
			return true;
		}
	}

	function onDrawItem(id, info) {
		if (getNamedId(id) == "Select") try {
			var x, y, w, h;
			with (info.itemRect) x=.x, y=.y, w=.w, h=.h;
			var selected = info.itemState & ODS_SELECTED;

			createFontLayer(w);
			var y2 = y + sendItemMessage(id, LB_GETTOPINDEX, 0, 0) * itemHeight;
			var getcol = System.toActualColor;
			with (bmpLayer) {
				.setImageSize(w, h);
				.fillRect(0, 0, w, h,           getcol(selected ? clHighlight : clWindow) | 0xFF000000);
				drawFontLayer(y2, h);
				fontLayer.fillRect(x, y2, w, h, getcol(selected ? clHighlightText : clWindowText));
				.operateRect(0, 0, fontLayer, x, y2, w, h);
			}
			info.draw(bitmap, x, y);
		} catch {}
		return true;
	}
	function createFontLayer(width) {
		if (layerCreated) return;
		/**/layerCreated = [];
		var cnt = fontList.count;
		with (fontLayer) {
			.setImageSize(width, cnt * itemHeight);
			.fillRect(0, 0, .imageWidth, .imageHeight, 0);
		}
	}
	function drawFontLayer(y2, h) {
		for (var s = y2\itemHeight, e = (y2+h-1)\itemHeight; s <= e; s++) {
			if(!layerCreated[s]) {
				layerCreated[s] = true;
				with (fontLayer) .holdAlpha = false, .face = dfBoth;
				drawFontLayerOne(s);
			}
		}
		with (fontLayer) .holdAlpha = true, .face = dfOpaque;
	}
	function drawFontLayerOne(i) {
		var pad = 4, basefh = itemHeight - pad*2;
		with (fontLayer) {
			var h = basefh;
			var face = .font.face = fontList[i];
			var name = filterFaceName(face);
			.font.height = h;
			.drawText(pad, i*itemHeight + (itemHeight - h)\2, name, 0xFFFFFF, 255, true);
		}
	}
	function filterFaceName(face) {//todo  可能没用
		var func = SystemConfig.FontDialogFilterFaceName;
		if (func && typeof func == "Object") {
			this.filterFaceName = func;
			face = func(face);
		} else {
			this.filterFaceName = function(face) { return face; };
		}
		return face;
	}
	function open() {
		var r = super.open(...);
		if (r.result == IDOK) return fontList[r.items.Select];
	}
}
var selectFontDoUserSelect = function(*) {
	try {
		var dlg = new MyFontSelectDialog(primaryLayer, chUserFace||chDefaultFace, *);
		var r = dlg.open(kag);
		invalidate dlg;
		return r;
	} catch {}
};

