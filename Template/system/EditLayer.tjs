// EditLayer.tjs - 一行編集用コントロールレイヤ
// Copyright (C)2001-2006, W.Dee and contributors  改変?配布は自由です

/*
単一行の編集コントロールとして動作するレイヤです。

書式  new EditLayer(<window>, <parent>)
*/

class EditLayer extends KAGLayer
{
	var Edit_text = ""; // 編集中のテキスト
	var Edit_selStart = 0; // カーソル位置  选择的位置
	var Edit_selAnchor = 0;//选择的长度
	var Edit_scrollPos = 0; // 表示されている左端の文字位置  左端文字的位置
	var Edit_caretLayer; // キャレット用レイヤ   光标使用的图层
	var Edit_color = clWindow; // 背景色
	var Edit_antialiased = true; // アンチエイリアスをかけるか  是否抗锯齿
	var Edit_opacity = 192; // 不透明度
	var Edit_maxChars = 0; // 最大文字数 ( 0 = 無制限 )
	var Edit_textColor = clWindowText;
	var Edit_blinkTimer;
	var Edit_vertical = false;  //是否纵向
	var Edit_mouseDown = false;
    var Edit_noborder = false; //无边框
	var Edit_textOffsetX = 0; // drawText 描画時のオフセット
	var Edit_textOffsetY = 0;
	var Edit_passwordView = false; // パスワードモード
	var Edit_passwordMark = "*";   // パスワードモード時のマスク文字

	// 文字選択用色
	var Edit_highlightColor     = clHighlight;
	var Edit_highlightTextColor = clHighlightText;
    
	function EditLayer(win, par, vert = false)
	{
		super.KAGLayer(win, par);

		Edit_vertical = vert;

		hitType = htMask;
		hitThreshold = 0; // 全域でマウスイベントは不透明
		focusable = true; // フォーカスは受け取る
		useAttention = true; // 注視ポイントを使用する

		Edit_caretLayer = new global.Layer(win, this);
		Edit_caretLayer.hitType = htMask;
		Edit_caretLayer.hitThreshold = 256; // 完全にマウスイベントは透明  光标事件无传递
		resizeCaret();

		imeMode = imDontCare; // IME 使用可

		// 点滅用タイマを用意
		Edit_blinkTimer = new Timer(onBlink, '');

		cursor = vert ? crHBeam : crIBeam;

		update();
	}

	function finalize()
	{
		invalidate Edit_caretLayer;
		invalidate Edit_blinkTimer;
		super.finalize(...);
	}

	function assign(src)
	{
		assignImages(src, true);
		Edit_text = src.Edit_text;
		Edit_selStart = src.Edit_selStart;
		Edit_selAnchor = src.Edit_selAnchor;
		Edit_scrollPos = src.Edit_scrollPos;
		Edit_color = src.Edit_color;
		Edit_textColor = src.Edit_textColor;
		Edit_antialiased = src.Edit_antialiased;
		Edit_opacity = src.Edit_opacity;
		Edit_vertical = src.Edit_vertical;
		Edit_maxChars = src.Edit_maxChars;
		Edit_noborder = src.Edit_noborder;
		Edit_textOffsetX = src.Edit_textOffsetX;
		Edit_textOffsetY = src.Edit_textOffsetY;
		Edit_passwordView = src.Edit_passwordView;
		Edit_passwordMark = src.Edit_passwordMark;
		var f = font;
		var sf = src.font;
		f.face = sf.face;
		f.angle = sf.angle;
		f.bold = sf.bold;
		f.italic = sf.italic;
		f.height = sf.height;
		cursor = src.cursor;
		resizeCaret();
		update();
	}
	//设置光标大小
	function resizeCaret()
	{
		// キャレットのサイズの初期化
		with (getCaretSize())
		{
			Edit_caretLayer.setImageSize(.w, .h);
			Edit_caretLayer.setSizeToImageSize();
			Edit_caretLayer.colorRect(0, 0, .w, .h, Edit_textColor);
		}
	}
	var _caretWidth = 2; // const
	function getCaretSize()
	{
		var fh = font.height;
		if (fh < 0) fh = -fh;
		var sz = %[ w:_caretWidth, h:fh ];
		if(Edit_vertical)
		{
			sz.w <-> sz.h;
		}
		return sz;
	}

	function getCaretXPos()
	{
		// キャレットの位置を取得
		var bch = _viewtext.substring(0, Edit_selStart); // キャレット以前の文字列
		var bchw = font.getTextWidth(bch);
		var sch = _viewtext.substring(0, Edit_scrollPos); // 表示以前の文字
		var schw = font.getTextWidth(sch);
		return bchw - schw + 3;
	}

	function ensureCaretVisible(step = 1)
	{
		// キャレットが確実に表示される位置までスクロールする
		var sp_save = Edit_scrollPos;
		var txtlen = Edit_text.length;
		if(Edit_selStart == txtlen)
			while(Edit_scrollPos >= 0 && getCaretXPos() <= 3) Edit_scrollPos-=step;
		else
			while(Edit_scrollPos >= 0 && getCaretXPos() < 3) Edit_scrollPos-=step;
		var lim = Edit_vertical ? imageHeight : imageWidth;
		while(Edit_scrollPos < txtlen && getCaretXPos() >= lim -3) Edit_scrollPos+=step;
		if(Edit_scrollPos < 0) Edit_scrollPos = 0;
		if(Edit_scrollPos > txtlen) Edit_scrollPos = txtlen;
		if(sp_save != Edit_scrollPos) update();
	}

	function setCaretLayerPos()
	{
		resizeCaret();
		var xpos = getCaretXPos() -1;
		if(Edit_vertical)
		{
			Edit_caretLayer.top = xpos;
			Edit_caretLayer.left = imageWidth - 3 - Edit_caretLayer.imageWidth;
			setAttentionPos(imageWidth - 3 , Edit_caretLayer.top);
		}
		else
		{
			Edit_caretLayer.top = 3;
			Edit_caretLayer.left = xpos;
			setAttentionPos(xpos, 3);
		}
	}

	function showCaret()
	{
		setCaretLayerPos();
		Edit_caretLayer.visible = true;
		Edit_blinkTimer.interval = 500;
		Edit_blinkTimer.enabled = true;
	}

	function hideCaret()
	{
		Edit_blinkTimer.enabled = false;
		Edit_caretLayer.visible = false;
	}

	function onBlink()
	{
		Edit_caretLayer.visible = ! Edit_caretLayer.visible;
	}

	function moveCaret(pos, keepAnchor, step = 1)
	{
		var oldAnchor = Edit_selAnchor;
		var oldStart  = Edit_selStart;

		// キャレットを移動
		pos = 0                if (pos < 0);
		pos = Edit_text.length if (pos > Edit_text.length);
		Edit_selStart  = pos;
		Edit_selAnchor = pos if (!keepAnchor);
		ensureCaretVisible(step) if (pos != oldStart);
		update() if (oldAnchor != Edit_selAnchor || pos != oldStart);
		showCaret();
	}
	
	function stepLeft( keepAnchor = false) { moveCaret(Edit_selStart - 1, keepAnchor, 3); }
	function stepRight(keepAnchor = false) { moveCaret(Edit_selStart + 1, keepAnchor, 3); }
	function moveHead( keepAnchor = false) { moveCaret(0,                 keepAnchor   ); }
	function moveTail( keepAnchor = false) { moveCaret(Edit_text.length,  keepAnchor   ); }

	function getCaretPosFromX(x)  //以x点击位置返回光标的位置
	{
		// クリックされた位置を割り出す
		x -= 3;
		var text = _viewtext.substring(Edit_scrollPos);
		var i = 0;
		for(;;)
		{
			var tx = text.substring(0, i);
			var cw;
			if((cw = font.getTextWidth(tx)) > x)
			{
				i --;
				var cc = text.substring(i, 1);
				var ccw = font.getTextWidth(cc);
				cw -= ccw;
				if(x > cw + (ccw>>1)) i++;
				if(i < 0) i = 0;
				if(i > text.length) i = text.length;
				return i + Edit_scrollPos;
			}
			i++;
			if(i > text.length) return text.length + Edit_scrollPos;
		}
	}

	function onMouseDown(x, y, button, shift)
	{
		Edit_mouseDown = true;

		// クリックされた
		if(x >= 3 && y >= 3 && x < imageWidth -3 && y < imageHeight - 3)
		{
			var oldStart = Edit_selStart;
			var oldAnchor = Edit_selAnchor;

			if(Edit_vertical)
				Edit_selStart = getCaretPosFromX(y);
			else
				Edit_selStart = getCaretPosFromX(x);

			// Shift キーが押されていないのであればアンカーも更新する
			if((shift & ssShift) != ssShift)
				Edit_selAnchor = Edit_selStart;

			// 更新の必要があれば更新する
			if(oldStart != Edit_selStart || oldAnchor != Edit_selAnchor)
				update();

			ensureCaretVisible();
			showCaret();
		}

		focus();
		super.onMouseDown(...);
	}

	function onMouseUp()
	{
		Edit_mouseDown = false;

		super.onMouseUp(...);
	}

	function onMouseMove(x, y, button)
	{
		if(Edit_mouseDown)
		{
			// ここでの移動はアンカーは絶対に移動しない

			if(Edit_vertical)
			{
				if(y >= 3 && y < (imageHeight - 3))
				{
					var oldStart = Edit_selStart;

					Edit_selStart = getCaretPosFromX(y);

					// 更新の必要があれば更新する
					if(oldStart != Edit_selStart)
						update();

					ensureCaretVisible();
					showCaret();
				}
				else
				{
					if(y <= 3)
						stepLeft(true);
					else
					if(y > (imageHeight - 3))
						stepRight(true);
				}
			}
			else
			{
				if(x >= 3 && x < (imageWidth - 3))
				{
					var oldStart = Edit_selStart;

					Edit_selStart = getCaretPosFromX(x);

					// 更新の必要があれば更新する
					if(oldStart != Edit_selStart)
						update();

					ensureCaretVisible();
					showCaret();
				}
				else
				{
					if(x <= 3)
						stepLeft(true);
					else
					if(x > (imageWidth - 3))
						stepRight(true);
				}
			}
		}

		super.onMouseMove(...);
	}

	/*
	 選択範囲に含まれる文字を全て削除する
	 削除したのであれば true を、そうでなければ false を返す
	*/
	function deleteSelectRange()
	{
		if(Edit_selStart == Edit_selAnchor)
			return false;

		var sp, ep;

		if(Edit_selStart > Edit_selAnchor)
		{
			sp = Edit_selAnchor;
			ep = Edit_selStart;
			Edit_selStart = Edit_selAnchor;
		}
		else
		{
			sp = Edit_selStart;
			ep = Edit_selAnchor;
			Edit_selAnchor = Edit_selStart;
		}

		Edit_text = Edit_text.substring(0, sp) + Edit_text.substring(ep);

		ensureCaretVisible();
		showCaret();
		update();

		return true;
	}

	/*
	 pos の位置にある文字が選択範囲に含まれているかどうか調べる
	*/
	function isSelected(pos)
	{
		if(Edit_selStart == Edit_selAnchor)
			return false;

		if(Edit_selStart > Edit_selAnchor)
			return ((Edit_selAnchor <= pos && Edit_selStart > pos) ? true : false);
		else
			return ((Edit_selAnchor > pos && Edit_selStart <= pos) ? true : false);

		return true;/* dead code */
	}

	/* 全選択操作 */
	function operationAllSelection()
	{
		Edit_selAnchor = 0;
		Edit_selStart = Edit_text.length;
		ensureCaretVisible();
		showCaret();
		update();
	}

	function operationNoSelection() {
		Edit_selAnchor = 0;
		Edit_selStart = 0;
		hideCaret();
		update();
	}

	/* コピー操作 */
	function operationCopy()
	{
		if(Edit_selAnchor == Edit_selStart || Edit_passwordView)  // 範囲がない or パス入力時はコピー不可
			return;

		var start, len;
		var text = "";

		if(Edit_selStart > Edit_selAnchor)
		{
			start = Edit_selAnchor;
			len = Edit_selStart - start;
		}
		else
		{
			start = Edit_selStart;
			len = Edit_selAnchor - start;
		}

		Clipboard.asText = Edit_text.substring(start, len);
	}

	/* ペースト操作 */
	function operationPaste()
	{
		// テキストが無ければもちろん何もしない
		if(Clipboard.hasFormat(cbfText))
		{
			var text = Clipboard.asText;

			// そんなにおっきぃの入らないよぅ
			if(Edit_maxChars)
			{
				var acceptLen = Edit_maxChars - (Edit_text.length - selectLength);
				text = text.substring(0, acceptLen);

				// むりぽ
				if(text == "")
					return;
			}

			insertCharacter(text);
		}
	}

	/* カット操作 */
	function operationCut()
	{
		if (Edit_passwordView) return; // パス入力時はカット不可
		operationCopy();
		deleteSelectRange();
	}

	function insertCharacter(ch) //插入文字
	{
		// 選択範囲のテキストを削除する
		deleteSelectRange();

		// ch をカーソル位置に挿入
		var bcr = Edit_text.substring(0, Edit_selStart);// 選択領域以前
		var acr = Edit_text.substring(Edit_selStart);// 選択領域以后
		Edit_text = bcr + ch + acr;
		Edit_selStart += ch.length;
		Edit_selAnchor = Edit_selStart;
		ensureCaretVisible();
		showCaret();
		update();
	}

	function deleteBeforeCaret()//删除文字（之前）
	{
		// キャレットの手前の文字を一文字削除する
		if(!deleteSelectRange() && Edit_selStart > 0)
		{
			var bcr = Edit_text.substring(0, Edit_selStart-1);
			var acr = Edit_text.substring(Edit_selStart);
			Edit_text = bcr + acr;
			Edit_selStart --;
			Edit_selAnchor = Edit_selStart;
			ensureCaretVisible(5);
			showCaret();
			update();
		}
	}

	function deleteAfterCaret()//删除文字（之后）
	{
		// キャレットの次の一文字を削除する
		if(!deleteSelectRange() && Edit_selStart < Edit_text.length)
		{
			var bcr = Edit_text.substring(0, Edit_selStart);
			var acr = Edit_text.substring(Edit_selStart + 1);
			Edit_text = bcr + acr;
			ensureCaretVisible();
			showCaret();
			update();
		}
	}

	function onKeyPress(key)
	{
		// キーが押された
		if(#key >= 32)
		{
			// 普通の文字
			if(!Edit_maxChars || (Edit_text.length - selectLength) < Edit_maxChars)
				insertCharacter(key);
			// マウスカーソルを一時的に非表示にする
			window.hideMouseCursor();
		}
		else super.onKeyPress(...);
	}
	//处理按键
	function onKeyDown(key)
	{
		// 特殊なオペレーション
		if(shift & ssCtrl)
		{
			switch(key)
			{
			case VK_A:	operationAllSelection(); return;
			case VK_C:	operationCopy(); return;
			case VK_X:	operationCut(); return;
			case VK_V:	operationPaste(); return;
			}
	}

		var sft = ((shift & ssShift) == ssShift);
		switch (key) {
		case VK_UP:     if ( Edit_vertical) return stepLeft (sft); break;
		case VK_LEFT:   if (!Edit_vertical) return stepLeft (sft); break;
		case VK_DOWN:   if ( Edit_vertical) return stepRight(sft); break;
		case VK_RIGHT:  if (!Edit_vertical) return stepRight(sft); break;
		case VK_HOME:   return moveHead(sft);
		case VK_END:    return moveTail(sft);
		case VK_DELETE: return deleteAfterCaret();
		case VK_BACK:   return deleteBeforeCaret();
		}
		super.onKeyDown(...);
	}


	function onFocus()
	{
		// フォーカスを得た
		super.onFocus(...);
		operationAllSelection();
		//showCaret();
	}

	function onBlur()
	{
		// フォーカスを失った
		super.onBlur(...);
		operationNoSelection();
	}


	function onPaint()
	{
		// 描画の直前に呼ばれる
		// 内容を描画する
		// とりあえずクリア
		var vert = Edit_vertical;
		var imwidth = vert?imageHeight:imageWidth;
		fillRect(0, 0, imageWidth, imageHeight, 0);
		colorRect(0, 0, imageWidth, imageHeight, Edit_color, Edit_opacity);
		// 文字を描画
		// グローバル変数や、オブジェクト内変数はアクセスが遅いので、
		// よく使う変数はローカルに持ってくる
		var h = font.height;
		h = -h if(h<0);
		var x = vert ? imageWidth - 3 : 3;
		var y = 3;
		var chpos = Edit_scrollPos;
		var text = _viewtext;
		var textlen = text.length;
		// var selstart = Edit_selStart;
		var highlightbg = 0xff000000 | Edit_highlightColor;
		var highlighttext = Edit_highlightTextColor;
		var anti = Edit_antialiased;
		var textcolor = Edit_textColor;
		var tx = "";
		if(vert)
		{
			for(;;)
			{
				y = 3 + font.getTextWidth(tx);
				if(y > imwidth) break;
				if(chpos >= textlen) break;
				var ch = text[chpos];
				var chw = font.getTextWidth(ch);
				if(isSelected(chpos++))
				{
					// 選択領域内
					// 背景を塗る
					fillRect(x, y, h, chw, highlightbg);
					// 文字を書く
					drawText(x, y, ch, highlighttext, 255, anti);
				}
				else
				{
					// 選択領域外
					drawText(x, y, ch, textcolor, 255, anti);
				}
				tx += ch;
			}
		}
		else
		{
			for(;;)
			{
				x = 3 + font.getTextWidth(tx);
				if(x > imwidth) break;
				if(chpos >= textlen) break;
				var ch = text[chpos];
				var chw = font.getTextWidth(ch);
				if(isSelected(chpos++))
				{
					// 背景を塗る
					fillRect(x, y, chw, h, highlightbg);
					// 文字を書く
					drawText(x, y, ch, highlighttext, 255, anti);
				}
				else
				{
					// 選択領域外
					drawText(x, y, ch, textcolor, 255, anti);
				}
				tx += ch;
			}
		}
		// 文字領域外をもう一度クリア
		if(vert)
		{
			fillRect(0, imageHeight - 3, imageWidth, 3, 0);
			colorRect(0, imageHeight - 3, imageWidth, 3, Edit_color, Edit_opacity);
		}
		else
		{
			fillRect(imageWidth - 3, 0, 3, imageHeight, 0);
			colorRect(imageWidth - 3, 0, 3, imageHeight, Edit_color, Edit_opacity);
		}
        if (!Edit_noborder) {
            // 枠を描画
            colorRect(0, 0, imageWidth, 1, 0x000000, 128);
            colorRect(0, 1, 1, imageHeight-2, 0x000000, 128);
            colorRect(imageWidth-1, 1, 1, imageHeight-1, 0xffffff, 128);
            colorRect(1, imageHeight-1, imageWidth-2, 1, 0xffffff, 128);
        }
	}
	// drawText に対して描画オフセットを適用する
	function drawText(x, y, *) {
		super.drawText(x + Edit_textOffsetX, y + Edit_textOffsetY, *);
	}
	// オフセット設定
	function setDrawTextOffset(ox, oy) {
		Edit_textOffsetX = ox;
		Edit_textOffsetY = oy;
		update();
	}

	// 画面に表示するべき文字列を取得（パスワード時はマスク文字）
	property _viewtext { getter {
		return Edit_passwordView ? Edit_passwordMark.repeat(Edit_text.length) : Edit_text;
	} }
	// パスワードモード用の設定プロパティ
	property passwordMode {
		getter { return Edit_passwordView;     }
		setter(v) {     Edit_passwordView = v; text = text; }
	}
	property passwordMark {
		getter { return Edit_passwordMark;     }
		setter(v) {     Edit_passwordMark = v; text = text; }
	}

	property text
	{
		setter(x)
		{
			x = "" if x === void;
			Edit_text = string x;
			Edit_selStart = 0;
			Edit_selAnchor = 0;
			Edit_scrollPos = 0;
			setCaretLayerPos();
			update();
		}
		getter
		{
			return Edit_text;
		}
	}

	property maxChars
	{
		setter(x)
		{
			Edit_maxChars = int x;
			Edit_selStart = 0;
			Edit_selAnchor = 0;
			Edit_scrollPos = 0;
			if(Edit_maxChars && Edit_text.length >= Edit_maxChars)
				Edit_text = Edit_text.substring(0, Edit_maxChars);
			setCaretLayerPos();
			update();
		}
		getter
		{
			return Edit_maxChars;
		}
	}

	property selectLength
	{
		getter
		{
			if(Edit_selStart > Edit_selAnchor)
				return Edit_selStart - Edit_selAnchor;
			return Edit_selAnchor - Edit_selStart;
		}
	}

	property width
	{
		setter(x)
		{
			super.width = x;
			imageWidth = x;
			update();
		}
		getter
		{
			return super.width;
		}
	}

	property height
	{
		setter(x)
		{
			super.height = x;
			imageHeight = x;
			update();
		}
		getter
		{
			return super.height;
		}
	}

	function setSize(w, h)
	{
		super.setSize(w, h);
		setImageSize(w, h);
		update();
	}

	property vertical
	{
		setter(x)
		{
			Edit_vertical = int x;
			update();
		}
		getter
		{
			return Edit_vertical;
		}
	}

	property color
	{
		setter(x)
		{
			Edit_color = int x;
			update();
		}
		getter
		{
			return Edit_color;
		}
	}

	property textColor
	{
		setter(x)
		{
			Edit_textColor = int x;
			update();
		}
		getter
		{
			return Edit_textColor;
		}
	}

	property antialiased
	{
		setter(x)
		{
			Edit_antialiased = int x;
			update();
		}
		getter
		{
			return Edit_antialiased;
		}
	}

	property bgOpacity
	{
		setter(x)
		{
			Edit_opacity = int x;
			update();
		}
		getter
		{
			return Edit_opacity;
		}
	}

	property noborder
	{
		setter(x)
		{
			Edit_noborder = int x;
			update();
		}
		getter
		{
			return Edit_noborder;
		}
	}
}



