var ACTION_MODULE_NUM = 6;

/**
 * アクション機能を拡張したレイヤ
 */
class ActionLayer extends AffineLayer,ActionBase {


    /**
     * コンストラクタ
     */
    function ActionLayer(win,par=null) {
       global.AffineLayer(win,par);
        _modules = new Array();
        _actionTimer = new Timer(actionHandler, '');
        _actionTimer.capacity = 1;
        _actionTimer.interval = 10;
        _actionTimer.enabled  = false;
    }

    /**
     * ファイナライザ
     */
    function finalize() {
        stopAction();
        global.AffineLayer.finalize();
		global.ActionBase.finalize();
    }

    /**
     * 画像のコピー(Layerの機能をオーバライド)
     * @param src コピー元のレイヤ
     */
    function assignImages(src) {
        delAction();
        AffineLayer.assignImages(src);
        if (src instanceof "ActionLayer") {
            /*for (var i=0;i<ACTION_MODULE_NUM; i++) {
                if (src._modules[i] != void) {
                    _modules[i] = src._modules[i];
                }
            }
            */
        }
         _beginAction();
    }


    //---------------------------------------------depreate------------------------------------------------
    /*
    /**
     * 初期化処理
     */
    function reset() {//OK
        stopAction();
        super.reset();
    }

    /**
     * アクションをスキップするかどうかの指定    指定是否跳过动画
     * 標準ではスキップしない。適宜継承すること。   标准情况是不跳过，需要子类覆写
     */
    function isSkip() { //OK
        return false;
    }

    // アクションを中止する
    function stopAction() {//OK
        actionHandler(true);
    }
    
    /**
     * アクション処理用
     * @param stopFlag 強制停止指令   是否强制停止
     */
    function actionHandler(stopFlag) {//OK
        var now = System.getTickCount();
        var done = true; //对此图层拥有的各种类型的动画进行run方法的调用
        for (var i=0;i<ACTION_MODULE_NUM; i++) {
            if (_modules[i] != void) {
                if (_modules[i].run(this, now, isSkip(), stopFlag == true)) {
                    _modules[i] = void;
                } else {
                    done = false;
                }
            }
        }
        if (done) {
            if (_actionTimer.enabled) {
                _actionTimer.enabled = false;
                invalidate _modules;
                _modules = new Array();
                onActionCompleted();
            }
        }
    }

    function _beginAction() { //开始动画  OK
        // アクションが存在してれば開始する
        if (!_actionTimer.enabled) {
            for (var i=0;i<ACTION_MODULE_NUM; i++) {
                if (_modules[i] != void) {
                    _actionTimer.enabled = true;
                    break;
                }
            }
        }
    }

    
    /**
     * アクションを開始する   开始动画
     * 複数回呼び出し可能。モジュールの type が異なるものは同時に適用可能 可以多次调用，对于type不同的module则可以适用（换言之类型一样的module是无法多次调用的）
     * @param moduleTyep モジュール種別。LayerModule クラスの子クラスのクラスオブジェクトを指定する  module的类别 
     * @param options パラメータ連想配列   指定参数的数组
     */
    function beginAction(moduleType, options=void) {
        if (moduleType == void) {
            // ignore
        } else if (typeof moduleType == "Object" && moduleType.LayerModule != void) {
            // モジュールの生成と登録
            var module = new moduleType(this, options);
            _modules[module.type] = module;
        } else if (moduleType instanceof "Dictionary") {
            options = moduleType;
            var moduleName = options["module"];
            var moduleType;
            if (typeof moduleName == "String") {
                moduleType = global[moduleName];
            } else {
                moduleType = moduleName;
            }
            if (typeof moduleType == "Object" && moduleType.LayerModule != void) {
                // モジュールの生成と登録
                var module = new moduleType(this, options);
                _modules[module.type] = module;
            } else {
                throw new Exception("指定的模块" + moduleName + "不存在或者不是 LayerModule ");
            }

        } else {
            throw new Exception("需要传递 LayerModule 的派生类");
        }
        _beginAction();
    }

    /**
     * アクション終了時に呼び出されるイベント  动画结束时调用
     */
    function onActionCompleted() {
    }

    /**
     * アクション実行中か
     */
    property inAction {
        getter() {
            return _actionTimer.enabled;
        }
    }
    
    // --------------------------------------------
    // コンビニエントメソッド
    // --------------------------------------------
    */
};

/**
 * レイヤアクションモジュール基底クラス
 */
class LayerModule {

    var type;   /// アクション種別   module类别
    var first;  
    var startTime;  
    var time;   // 処理時間  处理时间
    var delay;  // 開始遅延  开始的延迟
    var options;

    /**
     * コンストラクタ
     * @param layer レイヤ
     * @param params パラメータ
     */
    function LayerModule(layer, options) {
        this.options = options;
        delay = (int)options.delay if options.delay;
        time  = (int)options.time if options.time;
        first = true;
        startTime = 0;
    }

    /**
     * 処理実行
     * @param now 現在時刻(tick)
     * @param skip スキップ指定
     */
    function run(layer, now, skip, stop) {
        if (first) {
            startTime = now;
            first = false;
        }
        now -= startTime;
        if (delay) {
            now -= delay;
            if (now < 0) {
                return;
            }
        }
        var done = false;
        if (time) {
            if (now >= time || skip || stop) {  //now无法超过time的时间，如果跳过或者停止，那么直接移动到最后一刻
                done = true;
                now = time;
            }
        }
        if (stop) {
            done = true;
        }
        return action(layer, now, done) == true || done;
    }

    /**
     * 処理実行（個別実装)
     * @param layer 対象レイヤ
     * @param now 現在時刻(tick)
     * @param done 終了指定  
     * @return 終了する場合は true を返す
     */
    function action(layer, now, done) {
        return true;
    }
};

// -------------------------------------------------------------------------

/**
 * 移動モジュール    层移动模块
 * パラメータ: x 移動先位置
 * パラメータ: y 移動先位置
 */
class LayerMoveModule extends LayerModule {
    var start_x;
    var start_y;
    var diff_x;
    var diff_y;
    function LayerMoveModule(layer, options) {
        super.LayerModule(layer, options);
        type = 0;
        start_x = layer.left;
        start_y = layer.top;
        diff_x  = (int)options["x"] - start_x;
        diff_y  = (int)options["y"] - start_y;
    }
}

/**
 * 線形移動
 */
class LayerNormalMoveModule extends LayerMoveModule {
    function LayerNormalMoveModule(layer, options) {
        super.LayerMoveModule(layer, options);
    }
    function action(layer, now, done) {
        if (time) {
            layer.setPos(start_x + diff_x * now / time,
                              start_y + diff_y * now / time);
        } else {
            layer.setPos(start_x + diff_x, start_y + diff_y);
            return true;
        }
    }
};

/**
 * 加速移動
 */
class LayerAccelMoveModule extends LayerMoveModule {
    function LayerAccelMoveModule(layer, options) {
        super.LayerMoveModule(layer, options);
    }
    function action(layer, now, done) {
        if (time) {
            var t = now/time;
            var n = t*t;
            layer.setPos(start_x + diff_x*n, start_y + diff_y*n);
        } else {
            layer.setPos(start_x + diff_x, start_y + diff_y);
            return true;
        }
    }
};

/**
 * 減速移動
 */
class LayerDecelMoveModule extends LayerMoveModule {
    function LayerDecelMoveModule(layer, options) {
        super.LayerMoveModule(layer, options);
    }
    function action(layer, now, done) {
        if (time) {
            var t = now/time;
            var n = ( 1-(1-t)*(1-t) );
            layer.setPos(start_x + diff_x*n, start_y + diff_y*n);
        } else {
            layer.setPos(start_x + diff_x, start_y + diff_y);
            return true;
        }
    }
};

/**
 * 放物線移動
 * x/y: 放物線頂点（最終点ではないことに注意）
 * topTime: 頂点通過時間（総時間の1/2を指定すると丁度落下しきる 途中で止めたい場合は総時間と調整）
 */
class LayerParabolaMoveModule extends LayerMoveModule {
    var t0;    // 頂点通過時間（の2倍値）
    function LayerParabolaMoveModule(layer, options) {
        super.LayerMoveModule(layer, options);
        var topTime = (int)options["toptime"];
        t0 = topTime ? (topTime * 2) : time;
    }
    function action(layer, now, done) {
        if ( t0 ) {
            // X軸は等速移動、Y軸は2次関数移動
            var t = now*2/t0;
            // 原点と(1,1)を通り、逆U字型のカーブを描く2次関数
            var n = ( 1-(1-t)*(1-t) );
            layer.setPos(start_x + diff_x*t, start_y + diff_y*n);
        } else {
            // 時間指定の省略は不可だが、一応落下したものとみなしてX軸だけ移動する
            layer.setPos(start_x + diff_x, start_y);
            return true;
        }
    }
};

// -------------------------------------------------------------------------

/**
 * アクションモジュール   层震动模块
 */
class LayerActionModule extends LayerModule {
    function LayerActionModule(layer, options) {
        super.LayerModule(layer, options);
        type = 1;
    }
};

/**
 * 振動アクション
 * vibration 振動量(pixel)
 * waitTime 振動間の待ち時間(ms)
 */
class LayerVibrateActionModule extends LayerActionModule {
    var vibration;
    var waitTime;
    var nextTime;
    function LayerVibrateActionModule(layer, options) {
        super.LayerActionModule(layer, options);
        vibration  = (int)options["vibration"];
        waitTime   = (int)options["waittime"];
        nextTime = 0;
    }
    function action(layer, now, done) {
        if (done) {
            layer.setActionOffset(0, 0);
        } else if (now >= nextTime) {
            layer.setActionOffset(Math.random() * vibration - vibration/2,
                                  Math.random() * vibration - vibration/2);
            if (waitTime) {
                nextTime += waitTime;
            }
        }
    }
};

/**
 * 縦ゆれアクション
 * vibration 上下振動量(pixel)
 * cycle 周期(ms)
 */
class LayerJumpActionModule extends LayerActionModule {
    var vibration;
    var cycle;
    function LayerJumpActionModule(layer, options) {
        super.LayerActionModule(layer, options);
        vibration = (int)options["vibration"];
        cycle     = (int)options["cycle"];
    }
    function action(layer, now, done) {
        if (done) {
            layer.setActionOffset(0, 0);
        } else {
            layer.setActionOffset(0, vibration * Math.sin(Math.PI * 2 * now / cycle));
        }
    }
};

/**
 * 縦ゆれアクション(単発)
 * vibration 上下振動量(pixel)
 * cycle 周期(ms)
 */
class LayerJumpOnceActionModule extends LayerActionModule {
    var vibration;
    var cycle;
    function LayerJumpOnceActionModule(layer, options) {
        super.LayerActionModule(layer, options);
        vibration = (int)options["vibration"];
        cycle     = (int)options["cycle"];
    }
    function action(layer, now, done) {
        if (now >= cycle/2) {
            done = true;
        }
        if (done) {
            layer.setActionOffset(0, 0);
        } else {
            layer.setActionOffset(0, vibration * Math.sin(Math.PI + Math.PI * 2 * now / cycle));
        }
    }
};

/**
 * 横ゆれアクション
 * vibration 左右振動量(pixel)
 * cycle 周期(ms)
 */
class LayerWaveActionModule extends LayerActionModule {
    var vibration;
    var cycle;
    function LayerWaveActionModule(layer, options) {
        super.LayerActionModule(layer, options);
        vibration = (int)options["vibration"];
        cycle     = (int)options["cycle"];
    }
    function action(layer, now, done) {
        if (done) {
            layer.setActionOffset(0, 0);
        } else {
            layer.setActionOffset(vibration * Math.sin(Math.PI * 2 * now / cycle), 0);
        }
    }
};

/**
 * 横ゆれアクション(単発)
 * vibration 上下振動量(pixel)
 * cycle 周期(ms)
 */
class LayerWaveOnceActionModule extends LayerActionModule {
    var vibration;
    var cycle;
    function LayerWaveOnceActionModule(layer, options) {
        super.LayerActionModule(layer, options);
        vibration = (int)options["vibration"];
        cycle     = (int)options["cycle"];
    }
    function action(layer, now, done) {
        if (now >= cycle/2) {
            done = true;
        }
        if (done) {
            layer.setActionOffset(0, 0);
        } else {
            layer.setActionOffset(vibration * Math.sin(Math.PI + Math.PI * 2 * now / cycle), 0);
        }
    }
};

/**
 * 落下アクション
 * distance 落下距離
 * fallTime 落下時間
 */
class LayerFallActionModule extends LayerActionModule {
    var distance;
    var fallTime;
    function LayerFallActionModule(layer, options) {
        super.LayerActionModule(layer, options);
        distance = (int)options["distance"];
        fallTime = (int)options["falltime"];
        if (fallTime == void) {
            fallTime = time;
        }
    }
    function action(layer, now, done) {
        if (now >= fallTime) {
            done = true;
        }
        if (done) {
            layer.setActionOffset(0, 0);
        } else {
            layer.setActionOffset(0, - distance + distance * now / fallTime);
        }
        return done;
    }
};

// -------------------------------------------------------------------------

/**
 * 拡大縮小モジュール     层缩放模块
 */
class LayerZoomModule extends LayerModule {
    var startZoomX;
    var startZoomY;
    function LayerZoomModule(layer, options) {
        super.LayerModule(layer, options);
        type = 3;
        startZoomX = layer.zoomx;
        startZoomY = layer.zoomy;
    }
};

/**
 * 単純拡大
 * zoom: 最終サイズ（縦長?横長になっている状態からの変更は考慮しない）
 */
class LayerNormalZoomModule extends LayerZoomModule {
    var zoom;
    var diff;
    function LayerNormalZoomModule(layer, options) {
        super.LayerZoomModule(layer, options);
        zoom = (int)options["zoom"];
        diff = zoom - startZoomX;
    }
    function action(layer, now, done) {
        if (time) {
            var t = now/time;
            // 拡大時は加速、縮小時は減速
            var n = (diff<0)?( 1-(1-t)*(1-t) ):( t*t );
            layer.zoom = startZoomX + diff*n;
        } else {
            layer.zoom = zoom;
            return true;
        }
    }
};

/**
 * 拡縮を使った擬似3D回転（縦軸）
 * angvel: 回転の角速度（度/sec）
 */
class LayerVRotateZoomModule extends LayerZoomModule {
    var angvel;
    function LayerVRotateZoomModule(layer, options) {
        super.LayerZoomModule(layer, options);
        angvel = (int)options["angvel"];
    }
    function action(layer, now, done) {
        var angle = ( (angvel*now*2*Math.PI) / 360000.0/*= 360*1000*/ );
        layer.setZoom(startZoomX*Math.cos(angle), startZoomY);
    }
};

/**
 * 拡縮を使った擬似3D回転（横軸）
 * angvel: 回転の角速度（度/sec）
 */
class LayerHRotateZoomModule extends LayerZoomModule {
    var angvel;
    function LayerHRotateZoomModule(layer, options) {
        super.LayerZoomModule(layer, options);
        angvel = (int)options["angvel"];
    }
    function action(layer, now, done) {
        var angle = ( (angvel*now*2*Math.PI) / 360000.0/*= 360*1000*/ );
        layer.setZoom(startZoomX, startZoomY*Math.cos(angle));
    }
};

/**
 * ハートビート
 * zoom: 最大拡大率
 */
class LayerHeartBeatZoomModule extends LayerZoomModule {
    var diff;
    function LayerHeartBeatZoomModule(layer, options) {
        super.LayerZoomModule(layer, options);
        diff = (int)options["zoom"] - startZoomX;
    }
    function action(layer, now, done) {
        if (time) {
            var n = Math.sin( (now*Math.PI) / time );
            layer.zoom = startZoomX + diff*n;
        } else {
            return true;
        }
    }
};

/**
 * ズーム振動
 * vibration 振動量(％)
 * waitTime 振動間の待ち時間(ms)
 */
class LayerVibrateZoomModule extends LayerZoomModule {
    var vibration;
    var waitTime;
    var nextTime;
    function LayerVibrateZoomModule(layer, options) {
        super.LayerZoomModule(layer, options);
        vibration  = (int)options["vibration"];
        waitTime   = (int)options["waittime"];
        nextTime = 0;
    }
    function action(layer, now, done) {
        if (done) {
            layer.setZoom(startZoomX, startZoomY);
        } else {
            if (now >= nextTime) {
                layer.setZoom(
                    startZoomX + Math.random() * vibration - vibration/2,
                    startZoomY + Math.random() * vibration - vibration/2);
                if (waitTime) {
                    nextTime += waitTime;
                }
            }
        }
    }
};

// -------------------------------------------------------------------------
/**
 *  层旋转模块
 */
class LayerRotateModule extends LayerModule {
    var startRotateAngle;
    function LayerRotateModule(layer, options) {
        super.LayerModule(layer, options);
        type = 2;
        startRotateAngle = layer.rotate;
    }
};

/**
 * 単純回転
 * angvel: 角速度（度/sec）
 */
class LayerNormalRotateModule extends LayerRotateModule {
    var angvel;
    function LayerNormalRotateModule(layer, options) {
        super.LayerRotateModule(layer, options);
        angvel = (int)options["angvel"];
    }
    function action(layer, now, done) {
        layer.rotate = (startRotateAngle + angvel * now / 1000) % 360;
    }
};

/**
 * 回転振動（起き上がりこぼし／振り子）
 * vibration: 振幅(度)
 * cycle: 周期(ms)
 */
class LayerVibrateRotateModule extends LayerRotateModule {
    var vibration;
    var cycle;;
    function LayerVibrateRotateModule(layer, options) {
        super.LayerRotateModule(layer, options);
        vibration = (int)options["vibration"];
        cycle     = (int)options["cycle"];
    }
    function action(layer, now, done) {
        layer.rotate = (startRotateAngle + (vibration * Math.sin(Math.PI * 2 * now / cycle))) % 360;
    }
};

/**
 * 転倒
 * angle: 転倒時最大角（-90～90が適正 正で左、負で右に転倒）
 */
class LayerFalldownRotateModule extends LayerRotateModule {
    var angle;
    function LayerFalldownRotateModule(layer, options) {
        super.LayerRotateModule(layer, options);
        angle = (int)options["angle"];
    }
    function action(layer, now, done) {
        if (time) {
            var a = (angle*now*now/(time*time));
            layer.rotate = (startRotateAngle + a) % 360;
        } else {
            layer.rotate = (startRotateAngle + angle) % 360;
            return true;
        }
    }
};

/**
 * 指定角度へ
 * angle: 指定角度
 */
class LayerToRotateModule extends LayerRotateModule {
    var angle;
    function LayerToRotateModule(layer, options) {
        super.LayerRotateModule(layer, options);
        angle = (int)options["angle"];
    }
    function action(layer, now, done) {
        if (time) {
            layer.rotate = startRotateAngle + (angle - startRotateAngle) * now / time;
        } else {
            layer.rotate= angle;
            return true;
        }
    }
};

// -------------------------------------------------------------------------

/**
 * モードモジュール
 */
class LayerModeModule extends LayerModule {
    function LayerModeModule(layer, options) {
        super.LayerModule(layer, options);
        type = 4;
    }
};

/**
 * 点滅処理用
 * showTime 表示時間(ms)
 * hideTime 消去時間(ms)
 */
class LayerBlinkModeModule extends LayerModeModule {
    var showFlag;
    var showTime;
    var hideTime;
    function LayerBlinkModeModule(layer, options) {
        super.LayerModeModule(layer, options);
        showFlag = true;
        showTime = (int)options["showtime"];
        hideTime = (int)options["hidetime"];
    }
    function action(layer, now, done) {
        if (done) {
            layer.visible = true;
        } else {
            if (now % (showTime + hideTime) < showTime) {
                layer.visible = true;
            } else {
                layer.visible = false;
            }
        }
    }
};

/**
 * フェード処理用
 * intime  フェードイン時間   (0の場合フェードインしない)
 * outtime フェードアウト時間 (0の場合フェードアウトしない)
 */
class LayerFadeModeModule extends LayerModeModule {
    var opacity;
    var inTime;
    var outTime;
    function LayerFadeModeModule(layer, options) {
        super.LayerModeModule(layer, options);
        opacity = layer.opacity;
        inTime  = (int)options["intime"];
        outTime = (int)options["outtime"];
        if (outTime === void) {
            outTime = 0;
        }
        if (inTime == 0 && outTime == 0) {
            inTime = 1000; // XXX
        }
    }
    function action(layer, now, done) {
        if (done) {
            layer.opacity = opacity;
        } else {
            now = now % (inTime + outTime);
            if (now <= inTime) {
                layer.opacity = now * opacity / inTime;
            } else {
                if (outTime > 0) {
                    layer.opacity = (outTime - (now - inTime)) * opacity / outTime;
                } else {
                    layer.opacity = opacity;
                }
            }
        }
    }
};

/**
 * 指定された不透明度に変更
 * opacity 不透明度
 */
class LayerFadeToModeModule extends LayerModeModule {
    var opacity;
    var toOpacity;
    function LayerFadeToModeModule(layer, options) {
        super.LayerModeModule(layer, options);
        opacity = layer.opacity;
        toOpacity = (int)options["opacity"];
    }
    function action(layer, now, done) {
        if (time) {
            layer.opacity = opacity + (toOpacity - opacity) * now / time;
        } else {
            layer.opacity = toOpacity;
            return true;
        }
    }
};

