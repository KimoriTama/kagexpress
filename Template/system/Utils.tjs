// Utils.tjs - ユーティリティ関数
// Copyright (C)2001-2006, W.Dee and contributors  改変?配布は自由です


property random
{
	getter { return Math.random(); }
}

function intrandom(min = 0, max = 0) 
{
	// min 以上 max 以下の整数の乱数を返す
	// 引数が一個だけの場合は 0 ～ その数までの整数を返す
	if(min>max) { min <-> max; }
	return int(Math.random() * (max-min+1)) + min;
}

function str2num(str)
{
	// 文字列->数字 ( 全角対応 )
	var res;
	var i;
	for(i=0; i<str.length; i++)
	{
		var ch = str[i];
		switch(ch)
		{
		case "０": res+="0"; break;
		case "１": res+="1"; break;
		case "２": res+="2"; break;
		case "３": res+="3"; break;
		case "４": res+="4"; break;
		case "５": res+="5"; break;
		case "６": res+="6"; break;
		case "７": res+="7"; break;
		case "８": res+="8"; break;
		case "９": res+="9"; break;
		case "ｅ": res+="e"; break;
		case "Ｅ": res+="E"; break;
		case "。": res+="."; break;
		case "．": res+="."; break;
		case "－": res+="-"; break;
		case "ー": res+="-"; break;
		default: res+=ch; break;
		}
	}
	return +res;
}


function han2zen(str)
{
	// 半角→全角 ( 英数のみ )
	var res;
	var i;
	for(i=0;i<str.length;i++)
	{
		var num=#str[i];
		if(num>=0x0020 && num<=0x7e)
			res+=$(0xff00+num-0x20); // UNICODE
		else res+=str[i];
	}
	return res;
}


function kansuuji(
	n,
	digits = "〇一二三四五六七八九",
	small_units = "　十百千",
	large_units = "　万億兆京",
	zero_expression = "ゼロ",
	minus_expression = "マイナス"
	)
{
	// n を一般的な漢数字表記にして返す
	// TJS の整数型は 922京ほどまでなので京より上の桁の処理は必要ない

	n = int n;
	if(n == 0) return zero_expression;
	var out = ""; // 出力文字列
	if(n < 0) n = -n, out = minus_expression;
	n = string n; // 文字列に変換

	var n_len = n.length;
	var n_pos = n_len - 1;
	var nonzero = false;

	for(var i = 0; i < n_len; i ++, n_pos --)
	{
		var small_unit = n_pos & 3;
		var digit = +n[i];
		switch(small_unit)
		{
		case 0: // 1 の桁
			if(digit != 0) out += digits[digit], nonzero = true;
			if(nonzero && n_pos) out += large_units[n_pos >> 2];
			nonzero = false;
			break;
		case 1: // 十の桁
		case 2: // 百の桁
		case 3: // 千の桁
			if(digit != 0)
			{
				/* 千の桁は 万以上の場合慣用的に 一千という。
				   また、一百や一十とはいわない。 */
				if(digit != 1 || (small_unit == 3 && n_pos > 4))
					out += digits[digit] + small_units[small_unit];
				else
					out += small_units[small_unit];
				nonzero = true;
			}
			break;
		}
	}

	return out;
}

function kansuuji_simple(
	n,
	digits = "〇一二三四五六七八九",
	point = "?",
	minus = "マイナス")
{
	// n を漢数字表記にするが、桁単位はつけない

	n = string n;
	var n_len = n.length;
	var out = "";
	for(var i = 0; i < n_len; i++)
	{
		var digit = n[i];
		if(digit == ".")
			out += point;
		else if(digit == "-")
			out += minus;
		else if(digit >= '0' && digit <= '9')
			out += digits[+digit];
		else
			out += digit;
	}
	return out;
}

function number_format(n)
{
	// n を３桁ごとに カンマで区切った数値表現にする
	n = string n;
	var n_len = n.length;
	var n_digits = 0;

	// 数字の数を数える
	for(var i = 0; i < n_len; i++)
	{
		var digit = n[i];
		if(digit >= '0' && digit <= '9') n_digits ++;
		else if(digit == '.' || digit == 'e') break;
	}

	var out = "";

	// カンマを挿入
	for(var i = 0; i < n_len; i++)
	{
		var digit = n[i];
		if(digit >= '0' && digit <= '9')
		{
			n_digits --;
			out += digit;
			if(n_digits > 0 && n_digits % 3 == 0)
				out += ",";
		}
		else
		{
			out += digit;
		}
	}

	return out;
}


/**
 * ウィンドウの中央位置を取得（ダイアログ用）
 * @param  win 中央指定する親ウィンドウ(Windowオブジェクト以外なら画面中央)
 * @param  w   表示するウィンドウの幅
 * @param  h   表示するウィンドウの高さ
 * @return %[ x, y ]
 */
function getParentWindowCenterPos(win, w, h)
{
	var x, y, x1, y1, x2, y2, monitor;
	var iswin = (win && typeof win == "Object" && isvalid win && win instanceof "Window");

	if (typeof System.getMonitorInfo != "undefined" && iswin) try {
		var info = System.getMonitorInfo(true, win);
		monitor = info.work if (typeof info == "Object");
	} catch {}
	monitor = %[ x:0, y:0, w:System.screenWidth, h:System.screenHeight ] if (monitor === void);
	with (monitor) x1=.x, y1=.y, x2=.w+x1, y2=.h+y1;

	if (iswin) with (win) {
		var rx = x = ((.width  - w)\2) + .left;
		var ry = y = ((.height - h)\2) + .top;
		if (typeof .getClientRect == "Object") try {
			with ( .getClientRect()) {
				x = ((.w - w)\2) + .x;
				y = ((.h - h)\2) + .y;
			} 
		} catch { x=rx, y=ry; } // revert.
	} else {
		x =  (x1+x2   - w)\2;
		y =  (y1+y2   - h)\2;
	}
	x = x2 - w if (x > x2 - w);
	y = y2 - h if (y > y2 - h);
	x = x1     if (x < x1);
	y = y1     if (y < y1);
	return %[ x:x, y:y ];
}

/**
 * 辞書の総なめ処理
 * @param dict 辞書
 * @func 処理ファンクション func(name, value, dict);
 */
function foreach(dict, func, param*) {
    if (dict instanceof "Dictionary") {
        var names = [];
        names.assign(dict);
        for (var i=0; i<names.count; i+= 2) {
            func(names[i], names[i+1], dict, param*);
        }
    }else if(dict instanceof "Array"){
		for (var i=0; i<dict.count; i++) {
            func(i, dict[i], dict, param*);
        }
	}
}

/**
 * 禁則処理つき矩形範囲文字描画
 * @param layer 描画するレイヤ
 * @param text  描画するテキスト
 * @param elm   その他情報
 *        %[ x, y, w, h, // 描画範囲
 *           linestep, // 行間
 *           maxline, // 最大行数
 *           halign, valign, // -1or省略時:左/上寄せ，0:センタリング，1:右/下寄せ
 *           fontface, fontheight, fontbold, fontitalic, fontangle, // フォント属性
 *           color, param // 色, drawText残り引数の配列
 *           wwfollowing, wwleading, // 禁則文字
 *           conttext, // 続き表記文字(省略時:"…")
 *           nodraw, //trueなら描画しない（配列のみ返す）
 *           drawtext, // 描画メソッド上書き
 *           gettextwidth, // サイズ取得メソッド上書き
 *           chsep, // １文字ずつ描画
 *           ];
 * @return 分割したテキストのArray([ line1, line2, ... ])
 */
function drawTextKinsokuRect(layer, text, elm) {
	if (text == "" || layer === void) return [];
	var wwFollowing = "%),:;]}｡｣ﾞﾟ。，、．：；゛゜ヽヾゝゞ々’”）〕］｝〉》」』】°′″℃￠％‰　" +
		/**/          "!.?､･ｧｨｩｪｫｬｭｮｯｰ・？！ーぁぃぅぇぉっゃゅょゎァィゥェォッャュョヮヵヶ";
	var wwLeading   = "\\$([{｢‘“（〔［｛〈《「『【￥＄￡";

	var font = layer.font;
	var step, gtw = font.getTextWidth;
	var w, h, cont = "…", maxline = 0;
	with (elm) {
		// 上書き
		gtw = .gettextwidth if (typeof .gettextwidth == "Object");

		// 禁則文字
		wwFollowing = .wwfollowing if (.wwfollowing !== void);
		wwLeading   = .wwleading   if (.wwleading   !== void);
		cont        = .conttext    if (.conttext    !== void);

		// フォント更新
		font.face   = .fontface   if (.fontface   !== void);
		font.height = .fontheight if (.fontheight !== void);
		font.bold   = .fontbold   if (.fontbold   !== void);
		font.italic = .fontitalic if (.fontitalic !== void);
		font.angle  = .fontangle  if (.fontangle  !== void);

		step = (.linestep !== void) ? +.linestep : +Math.abs(font.height);
		w = .w;
		h = .h;
		maxline = +.maxline if (.maxline !== void);
	}

	var cur = "", lines = [], len = text.length;
	for (var ch, i = 0, y = 0; i <= len; i++) {
		if (i == len || (ch = text.charAt(i)) == "\n" || gtw(cur + ch) >= w) {
			var next = ch, cl;
			if (next == "\n") next = "";
			// 行末禁則チェック
			else while ((cl = cur.length) > 0 &&
						wwLeading.indexOf((ch = cur.charAt(cl-1))) >= 0) {
				next = ch + next;
				cur  = cur.substr(0, cl-1);
			}
			// 最後の行の処理
			if (y+step >= h || (maxline > 0 && maxline == lines.count+1)) {
				if (i < len) {
					while ((cl = cur.length) > 0 && gtw(cur + cont) >= w)
						cur = cur.substr(0, cl-1);
					lines.add(cur + cont);
				} else
					lines.add(cur);
				break;
			}
			// 行頭禁則チェック
			if (i < len && next != "") {
				var last = -1, wf;
				while ((cl = cur.length) > 0 &&
					   (wf = wwFollowing.indexOf(next.charAt(0))) >= 0 && last != wf) {
					next = cur.charAt(cl-1) + next;
					cur  = cur.substr(0, cl-1);
					last = wf;
				}
			}
			lines.add(cur);
			cur = next;
			y += step;
		} else cur += ch;
	}
	var lc = lines.count;
	if (!elm.nodraw && lc > 0) {
		var x, y, dt, color, param, valign, halign;
		with (elm) {
			color = .color;
			param = (typeof .param == "Object") ? .param : [];
			dt    = (typeof .drawtext == "Object") ? .drawtext
				: function(self, *) { return drawText(*); } incontextof layer;
			x = .x;
			y = .y;
			halign = (.halign !== void) ? +.halign : -1;
			valign = (.valign !== void) ? +.valign : -1;
			var th = (lc-1) * step + (int)Math.abs(font.height);
			switch  (valign) {
			case  0: y += (h - th)\2; break;
			case  1: y += (h - th);   break;
			}
		}
		for (var i = 0; i < lc; i++, y+=step) {
			var text = lines[i], dx = x;
			switch (halign) {
			case  0: dx += (w - gtw(text))\2; break;
			case  1: dx += (w - gtw(text));   break;
			}
			if (!elm.chsep) dt(layer, dx, y, text, color, param*);
			else if (text != "") {
				// １文字ずつ描画
				for (var j = 0, len = text.length; j < len; j++) {
					var ch = text.charAt(j);
					dt(layer, dx, y, ch, color, param*);
					dx += gtw(ch);
				}
			}
		}
	}
	return lines;
}



/**
 * 任意の文字列に対して @つき文字列評価を行う		对任意字符串进行带@字符串计算
 * @param str 評価する文字列			str要计算的字符串
 * @param context 実行するコンテキスト（変数参照などがそのコンテキストで実行される）	 context要执行的上下文（变量引用等在该上下文中执行）
 * @param bkslesc "\"文字をエスケープするかどうか（true なら \x30 -> \x30, falseなら \x30 -> 0)	 bkslesc是否转义“\”字符（如果为真，则\x30->\x30；如果为假，则\x30->0）
 * @return 評価された文字列		计算出的字符串
 * 注意：&～;は～の評価式内に;が含まれると正しく動かないので注意（例：「&";";」など）			注意：&～；在～的评估公式中 含有；则会产生计算错误
 *       bkslesc=falseだと文字列の内容によっては「文字列定数/正規表現/オクテット即値が		如果bkslesc=false的话，根据字符串的内容，
 *       終わらないままスクリプトの終端に達しました」の例外が出る場合があるので注意		有时会出现“字符串常数/正则表达式/八位即值未结束就到达脚本的末端”的异常，请注意
 * bkslesc为true会转义 \ 和 ' ，为false只会转义 '   
 */
function applyInlineStringVariableExtract(str, context = null, bkslesc = true) {
	str = ((string)str).replace(/&(.*?);/g, function (m) { return "${"+m[1]+"}"; }); // &～; を ${～}に置換     把 &～; 换成  ${～}
	str = (str + '${""}').replace(/(.*?)(\$\{.*?\})/g, function (m) { // ～${～}を検索		搜索   ${～} 
		return m[1].replace(this, function (q) { return "\\"+q[0]; }) // ${～}でない部分のクオートなどをエスケープする
			+  m[2]; // ${～}の部分はそのままにする
	} incontextof (bkslesc ? /[\'\\]/g : /[\']/g)); //bkslescでエスケープ対象を決定		bkslesc决定转义对象
	return ((function(exp){return exp!;}) incontextof context)("@'"+str+"'");
}


/** 
 * @description: 判断对象是否为空
 * @param obj 对象
 * @param propName 属性名
 * @return 
 */
function isBlank(obj,propName){
	if(propName!==void){
		if(isBlank(obj)||isBlank(propName))return true;
		if(typeof obj !="Dictionary" && typeof obj !="Object") 
			throw new Exception("the argument is not a object",Scripts.getTraceString());
		if(typeof obj[propName] == "undefined")return true;
		else return isBlank(obj[propName]);
	}
	else if(obj ===void || obj === null || !isvalid obj)
		return true;
	if(typeof obj == "String"){
		obj = obj.trim();
		return obj==="";
	}else if(obj instanceof "Dictionary"){
		var arr=[];
		arr.assign(obj);
		return arr.count==0;
	}else if(obj instanceof "Array"){
		return obj.count==0;
	}
	else return false;
}

/** 
 * @description: 数组比较
 * @param arr1	数组1
 * @param arr2 	数组2
 * @param strict	是否严格比较，严格模式会比较顺序是否相同
 * @return 	是否相同
 */
function arrCompare(arr1,arr2,strict = false){
	if(arr1 == arr2)return true;
	if(isBlank(arr1) && isBlank(arr2))return true;
	if(isBlank(arr1) == !isBlank(arr2))return false;
	if(arr1.count != arr2.count) return false;
	if(strict){
		for(var i=0;i<arr1.count;i++)
			if(arr1[i] != arr2[i])return false ;
	}else{
		for(var i=0;i<arr1.count;i++)
			if(arr1.find(arr2[i])<0)return false;
	}
	return true;
	
}
function getObjectKeys(dic){
	var arr =[];
	foreach(dic,function(k,v,dic,arr){
		arr.push(k);
	},arr);
	return arr;
}
//复制一个指令对象，指令全部的属性会存在taglist属性中，
// name 指令名  elm 指令属性字典  add 附加的指令属性
function copyTag(name, elm, add)
{
	var e = %[];
	(Dictionary.assign incontextof e )(elm, false);
	(Dictionary.assign incontextof e )(add, false);
	e.tagname = name if name !== void;
	return e;
}


/**
 * 存在するファイルの拡張子を補完してファイル名を返す			返回文件名以补充现有文件的扩展名
 * @param storage ファイル名（拡張子指定がない場合は exts* で補完）		文件名，如果未指定扩展名，则用exts*补全
 * @param exts* 拡張子リスト（先に来た方が優先）			扩展名列表（先来优先）
 * @return 拡張子まで指定された画像ファイル名。存在しなければ void		指定到扩展名的图像文件名。如果不存在void
 */
function getExistFileNameAutoExtFill(storage, exts*)
{
	with (Storages) if (!.isExistentStorage(storage)) {
		var chop = .chopStorageExt(storage) + ".";
		storage = void;
		for (var i = 0, test, cnt = exts.count; i < cnt; i++) {
			test = chop + exts[i];
			if (.isExistentStorage(test)) {
				storage = test;
				break;
			}
		}
	}
	return storage;
}
/**
 * 存在するボイスファイル名を返す
 * @param storage 探すファイル名
 * @return 存在するファイル名(拡張子あり)
 */
function getExistVoice(storage)
{
	var test, isExist = Storages.isExistentStorage;
	if(!isExist(storage)) {
		if (test = storage + ".ogg", isExist(test))
			storage = test;
		else if (test = storage + ".opus", isExist(test))
			storage = test;
		else if (test = storage + ".wav", isExist(test))
			storage = test;
		else
			storage = void;
	}
	return storage;
}
/**
 * 指定した名前の画像ファイルが存在すればその名前を返す
 * @return 拡張子まで指定された画像ファイル名。存在しなければ void
 */
global.Layer.SupportedExtensions = [ "png", "tlg", "tlg5", "tlg6", "jpeg", "jpg", "bmp","psd" ];
function getExistImageName(storage)
{
	return getExistFileNameAutoExtFill(storage, global.Layer.SupportedExtensions*);
}

/**
 * 既存のクラス関数またはプロパティに別の関数を後から差し込む		替换某对象的函数和属性的方法
 * 替换的方法的第一个参数为原来的函数
 * 替换的getter和setter的第一个参数也为原来的属性
 * @param elm.target hook的对象
 * @param elm.method	对象的方法名
 * @param elm.func		替换的函数
 * @param elm.prop		对象的属性名
 * @param elm.get		替换的getter
 * @param elm.set		替换的setter
 */
function objectHookInjection(elm) {
	var target = elm.target;
	if (typeof target != "Object") throw new Exception("the hook object is not a object");
	if (isBlank(elm.method) && isBlank(elm.prop)) throw new Exception("the target to hook is blank");

	var name = "__InjectionTable", table;
	if (typeof global[name] != "undefined") table = global[name];
	else global[name] = table = %[];
	var gettag = function(table, target, name, suffix = "_") {	//	获得一个未注册过的名称
		var tag = (string)target +"::"+ name;
		while (typeof table[tag] != "undefined") tag += suffix;
		//dm("injection/tag:", tag);
		return tag;
	} incontextof global;

	if (elm.method != "") {
		var method = elm.method, tag = gettag(table, target, method, elm.suffix);
		var old = typeof target[method] == "Object" ? (&target[method]) : function {}; // 無い場合はダミーで
		if (!(old instanceof "Function")) throw new Exception("this is not a method: "+method);

		table[tag] = %[ ovr:elm.func, orig:old ];
		target[method] = (@"function(*) { with (global.${name}['${tag}']) return (.ovr incontextof this)((.orig incontextof this), *); }")! incontextof null;
	}
	if (elm.prop != "") {
		var prop = elm.prop, tag = gettag(table, target, prop, elm.suffix);
		var get = elm.get, set = elm.set;
		var  old, getprop = function(target, key) { return &target[key]; };
		try { old = getprop(target, prop); } catch {}
		if (old === void || !(old instanceof "Property")) throw new Exception("this is not a property: "+prop);
		if (!get && !set) throw new Exception("there is not getter/setter: "+prop);

		table[tag] = %[ "getter" => get, "setter" => set, orig:old ];
		var makeprop = function(tag, get, set, name) {
			("property prop { " +
			 (get ? @"getter    { with (global.${name}['${tag}']) return (.getter incontextof this)((\&.orig) incontextof this);    } " : "") +
			 (set ? @"setter(v) { with (global.${name}['${tag}'])        (.setter incontextof this)((\&.orig) incontextof this, v); } " : "") +
			 "}")!;
			return &this.prop;
		} incontextof %[];		// 匿名作用域里的属性
		(&target[prop]) = makeprop(tag, !!get, !!set, name) incontextof null;	// 获取出的属性处于空作用域下
	}
}

