// KAGLayer.tjs - KAG のレイヤの基本クラス
// Copyright (C)2001-2006, W.Dee and contributors  改変?配布は自由です

/*
 レイヤ関連のクラス階層   layer相关的类

 Layer ( 吉里吉里ネイティヴクラス ) 吉里吉里的native类
  |
  +-- KAGLayer ( このファイル )此文件
       |
       +-- AnimationLayer ( AnimationLayer.tjs )
       |    |
       |    +-- ClickGlyphLayer ( AnimationLayer.tjs )
       |    |
       |    +-- GraphicLayer ( GraphicLayer.tjs )
       |         |
       |         +-- BaseLayer ( GraphicLayer.tjs )
       |         |
       |         +-- CharacterLayer ( GraphicLayer.tjs )
       |
       +-- MessageLayer ( MessageLayer.tjs )
       |
       +-- ButtonLayer ( ButtonLayer.tjs )
       |    |
       |    +-- LinkButtonLayer ( MessageLayer.tjs )
       |    |
       |    +-- LButtonLayer ( HistoryLayer.tjs )
       |
       +-- EditLayer ( EditLayer.tjs )
       |    |
       |    +-- LinkEditLayer ( MessageLayer.tjs )
       |
       +-- CheckBoxLayer ( CheckBoxLayer.tjs )
            |
            +-- LinkCheckBoxLayer ( MessageLayer.tjs )
*/

/*
　ちょっとわかりづらい、トランジション終了時の動作について覚え書き

　吉里吉里はトランジション終了時に、トランジション元(src=相手)がある場合は、
子レイヤを含む(children=true)場合は相手とツリーごと自分自身のレイヤを交換し、
子レイヤを含まない(children=false)場合は、子の絶対的なツリー上の位置はその
ままにして相手と入れ替わる。

　子レイヤを含まないトランジションを行えるのは背景レイヤのみ。

トランジションを行うと、上記における「入れ替え」を行うが、吉里吉里本体の
入れ替え、は name などの重要な情報も入れ替えてしまうので、
GraphicLayer.exchangeInfo で内容を交換する。

また、trans 属性で exchange=true が指定された場合は、両者のレイヤは入れ替わ
るが、exchange=false (デフォルト) が指定された場合は、トランジション元(src)
からトランジション先への情報のコピーを行わないとならない。

srcなし の時はレイヤ単独でのトランジションが行われるのでこれらの考慮は
必要ないが、終了時には子レイヤがすべて非表示になる。

?メッセージレイヤ、前景レイヤが、srcなしでトランジション (children=true)
　何もしなくてよいが、終了後それらの子レイヤは自動的に非表示になる。

?メッセージレイヤ、前景レイヤが、srcありでトランジション (children=true)
　重要な情報をトランジション元と交換、exchange=false の場合はさらに
　トランジション元の情報をトランジション先にコピー。ただし、このコピーの際に
　ウィンドウの可視?不可視の情報はコピーしない。

?背景レイヤがsrcなしでトランジション(children=true)
　何もしなくてよいが、終了時に子レイヤは非表示になる。

?背景レイヤがsrcなしでトランジション(children=false)
　本当に何もしない。

?背景レイヤがsrcありでトランジション(children=true)
　重要な情報をトランジション元と交換、しかも子レイヤに対してもこの
　「重要な情報を相手と交換」の指示を出す。exchange=false の場合はさらに
　トランジション元の情報をトランジション先にコピー。これも、子レイヤすべて
　に対しても指示する。

?背景レイヤがsrcありでトランジション(children=false)
　重要な情報をトランジション元と交換。子レイヤに対しては
　「重要な情報を相手と交換」の指示をださない。exchange=false の場合は
　さらにトランジション元の情報をトランジション先にコピー。
　これも子レイヤに対しては指示しない。



有点难以理解，关于过渡结束时的动作的备忘录
吉里吉里在变换结束时，在有变换源（src=对方）的情况下，
在包含子层（children=true）的情况下，与对方按树交换自己
的层，在不包含子层（children=false）的情况下，保持子在
绝对树上的位置不变，与对方交换。
只有背景层可以进行不包含子层的过渡。

进行过渡时，进行上述“更换”，但吉里吉里主体的
替换，也会替换name等重要信息
使用GraphicLayer.exchangeInfo交换内容。
另外，在trans属性中指定了exchange=true的情况下，两者的层被替换
但是，如果指定了exchange=false（默认值），则为“从”（src）
中描述的场景，使用以下步骤创建明细表，以便在概念设计中分析体量的体积。
在没有src的情况下，会进行层单独的过渡，所以这些考虑是
不需要，但结束时子层全部隐藏。
>消息层和前景层在没有src的情况下过渡(children=true)
虽然可以什么都不做，但结束后它们的子层自动被隐藏。
>消息层、前景层为src且过渡（children=true）
与转换源交换重要信息，如果exchange=false
将源信息复制到目标位置。但是，在这个复印的时候
窗口可见？不复制不可见的信息。
>背景层不带src的过渡(children=true)
虽然可以什么都不做，但是在结束时子层被隐藏。
>背景层不带src的过渡(children=false)
我真的什么都不做。
>背景层为src且过渡（children=true）
将重要信息与过渡源交换，并且对于子层也是如此
发出“与对方交换重要信息”的指示。如果exchange=false
将源信息复制到目标位置。这也是所有子层
的命令。
>背景层为src且过渡
已与过渡源交换重要信息。对于子层
不要发出“与对方交换重要信息”的指示。如果exchange=false
另外，将过渡源的信息复制到过渡目的地。
这也不对子层进行指示。
*/

class KAGLayer extends Layer
{
	// KAG で用いる背景/前景レイヤ、メッセージレイヤ、ボタンレイヤなどの基本クラス  KAG中使用的背景/前景层、消息层、按钮层等基本类
	var inTransition = false; // トランジション中か  是否在变换中
	var transExchange = false; // トランジション終了時に入れ替えを行うか  是否在变换结束时进行更换
	var transWithChildren = false; // トランジションは子レイヤも含めて行うか  变换是否包括子层

	var moveObject; // 現在進行中の自動移動用オブジェクト(進行していないときはvoid) 当前正在进行的自动移动对象（未进行时为void）
	function KAGLayer(win, par)
	{
		super.Layer(win, par);
	}

	function finalize()
	{
		invalidate moveObject if moveObject !== void;
		super.finalize(...);
	}

	function setOptions(elm)  //设置层属性
	{
		// elm に従ってレイヤのオプションを設定
		visible = +elm.visible if elm.visible !== void;
		left = +elm.left if elm.left !== void;
		top = +elm.top if elm.top !== void;
		opacity = +elm.opacity if elm.opacity !== void;

		if(elm.modal !== void)
		{
			// this would not work well
			var modal = elm.modal;
			if(modal) setMode(), focus(); else removeMode();
		}

		absolute = +elm.index if elm.index !== void;
	}
	property windowTop{
		getter{
			var t = top,p=parent;
			while(!isBlank(p)){
				t += p.top;
				p=p.parent; 
			}
			return t;
		}
	}
	property windowLeft{
		getter{
			var l = left,p=parent;
			while(!isBlank(p)){
				l += p.left;
				p=p.parent; 
			}
			return l;
		}
	}
	property cursorX {
		getter(){
			return super.cursorX;
		}
		setter(v){
			setCursorPos(v,super.cursorY);
		}
	}
	property cursorY {
		getter(){
			return super.cursorY;
		}
		setter(v){
			setCursorPos(super.cursorX,v);
		}
	}
	/*function _getParentPos(curLay,destLay,prop){
		if(curLay == destLay) return 0;
		else return _getParentPos(curLay.parent,destLay,prop) + curLay[prop];
	}*/
	function _getParentPos(destLay,prop){
		var pos = this[prop],p=parent;
		while(!isBlank(p) && p !==destLay ){
			pos += p[prop];
			p=p.parent; 
		}
		if(p!== destLay)throw new Exception("the layer is not this layer's ancestor");
		return pos;
	}
	function getParentLeft(par){
		return _getParentPos(par,"left");
	}
	function getParentTop(par){
		return _getParentPos(par,"top");
	}

	function loadImages(storage, key)
	{
		// loadImages オーバーライド
		key = adjustColorKey(key);
		return super.loadImages(storage, key);
	}

	function adjustColorKey(key)
	{
		// 文字列で与えられたカラーキーの変換
		if(key === void)
			key = clNone;
		else if(typeof key == "String")
		{
			if(key == "adapt")
				key = clAdapt; // adaptive color key
			else
			{
				if(key.length >= 7)
					key = +key;
				else
					key = +key + 0x3000000; // 0x3000000 = パレットインデックスによる指定 通过调色板索引指定(现在显示器还有不是全彩的吗？忽视即可)
			}
		}
		return key;
	}

	function assignImages(src, copyvisiblestate = false)
	{
		// assignImages オーバーライド  覆盖父类
		// src の「目に見える」情報をこのレイヤにコピーする  将src图层的影像视觉效果的信息全部复制
		// コピーされる内容は、 复制的内容包括
		// ?透明度 
		// ?位置
		// ?表示サイズ  显示尺寸
		// ?レイヤ内画像表示位置(imageLeft, imageTop)  图层内的图像位置
		//  ( 上記３つは copyvisiblestate = true のばあい )  以上三个当指定copyvisiblestate = true 才会执行
		// ?画像サイズ  画像尺寸
		// ?レイヤ画像、領域画像  图层画像  领域画像
		super.assignImages(src);
		if(copyvisiblestate)
		{
			var su = super;
			su.visible = src.visible;
			su.opacity = src.opacity;
			su.absolute = src.absolute if !src.isPrimary && src.parent.absoluteOrderMode;
			su.type = src.type;
			su.setPos(src.left, src.top, src.width, src.height);
			su.setImagePos(src.imageLeft, src.imageTop);
		}
	}

	function assignVisibleState(src)
	{
		// src から上記 assignImages のうち、copyvisiblestate = true に   从src中复制 当上面的assignImages方法copyvisiblestate = true 时复制的信息
		// したときだけにコピーされる情報をコピー
		visible = src.visible;
		opacity = src.opacity;
		absolute = src.absolute if !src.isPrimary && src.parent.absoluteOrderMode;
		type = src.type;
		setPos(src.left, src.top, src.width, src.height);
		setImagePos(src.imageLeft, src.imageTop);
	}

	function beginTransition(elm, src)
	{
		// beginTransition オーバーライド
		// elm に従い、トランジションを開始する
		// src にはトランジションの相手を指定
		// stopTransition(); // 現在のトランジションは停止

		if(elm.exchange !== void) transExchange = +elm.exchange; else transExchange = false;
		var method = elm.method;
		if(elm.time !== void)
		{
            if (window.drawspeed !== void) {
                elm.time *= window.drawspeed;
            }
            elm.time = 1 if +elm.time == 0; // 時間に 0 は指定できないので  无法指定时间为0
		}
		if(method === void)
		{
			method = 'universal'; // デフォルトでユニバーサル 默认使用 universal方式
		}
		else if(method == 'scroll')
		{
			// パラメータの変換
			switch(elm.from)
			{
			case 'left': elm.from = sttLeft; break;  //这些数均为常数
			case 'top': elm.from = sttTop; break;
			case 'right': elm.from = sttRight; break;
			case 'bottom': elm.from = sttBottom; break;
			}
			switch(elm.stay)
			{
			case 'nostay': elm.stay = ststNoStay; break;
			case 'stayback': elm.stay = ststStaySrc; break;
			case 'stayfore': elm.stay = ststStayDest; break;
			default: elm.stay = ststNoStay; break;
			}
		}
		var withchildren = elm.children;
		if(withchildren === void)
			withchildren = true;
		else
			withchildren = +withchildren;
		transWithChildren = withchildren;
		inTransition = true;
		window.transCount++; // 進行中のトランジションの数を増やす
		src.update();// 吉里吉里怎么会有这种bug？
		this.update();
		super.beginTransition(method, withchildren, src, elm);
	}

	function onTransitionCompleted(dest, src)
	{
		super.onTransitionCompleted(...);
		if(window != null)
		{
			inTransition = false;
			window.transCount--; // 進行中のトランジションの数を減らす
			atEndOfTransition(src, transWithChildren, transExchange);
			window.onLayerTransitionCompleted(this, dest, src);   //kagWindow特有的方法
		}
	}

	function atEndOfTransition(src, withchildren, exchange)
	{
		// 必要に応じて オーバーライドすること
		// トランジションが終了したときに呼ばれる。
		// レイヤ単独でトランジションが行われた場合は src は null になる。
		// そうでない場合、exchange が true の時は、src と 自分の内容
		// を取り替え、そうでなければ src に自分の内容
		// をコピー。
		// 子レイヤも含めてトランジションが行われた場合は withchildren が
		// true になる。
		// root は、トランジションの大本に対して呼ばれるときに true になる。
		/*
		//根据需要进行覆盖
		在过渡结束时被呼叫。
		如果单独在层中执行变换，则src为空。
		否则，当exchange为真时，用src替换自己的内容，否则将自己的内容复制到src。
		在包括子层在内进行了变换的情况下，withchildren为真。
		当被称为过渡的根时，root为真。
		*/
	}

	//存储层信息为字典
	function store()  
	{
		// 辞書配列に現在の状態を保存する
		var dic = %[];
		dic.left = left;
		dic.top = top;
		dic.width = width;
		dic.height = height;
		dic.imageWidth = imageWidth;
		dic.imageHeight = imageHeight;
		dic.opacity = opacity;
		dic.visible = visible;
		dic.imageLeft = imageLeft;
		dic.imageTop = imageTop;
		dic.absolute = absolute;
		dic.type = type;
		return dic;
	}
	//用字典复原层
	function restore(dic)
	{
		// 辞書配列 dic から情報を読み出し、このレイヤに設定する
		setImageSize(dic.imageWidth, dic.imageHeight);
		setPos(dic.left, dic.top, dic.width, dic.height);
		setImagePos(dic.imageLeft, dic.imageTop);
		opacity = dic.opacity;
		visible = dic.visible;
		absolute = dic.absolute if !isPrimary && dic.absolute !== void;
		type = dic.type if !isPrimary && dic.type !== void;
	}
}


