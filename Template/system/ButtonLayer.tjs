// ButtonLayer.tjs - ボタンレイヤ
// Copyright (C)2001-2006, W.Dee and contributors  改変・配布は自由です

/*
ボタンとして動作するレイヤです。   按下按钮时有所动作的图层
押し込まれた時の画像、マウスカーソルがレイヤ内にあるときの画像、通常の画像 
をそれぞれ変えることができます。
按下时的图像，鼠标移动上去的图像，一般的图像，能够在这些之中进行变换

書式  new ButtonLayer(<window>, <parent>) 构造方法

<window> : このレイヤを作成するウィンドウ  窗口
<parent> : 親レイヤ  父图层

重写了 loadImages 方法，载入图片作为按钮的图片
提供  loadButtons 方法，作为分多张载入图片的方式
draw drawState 方法 提供了按不同按钮状态的绘制按钮的方式
*/

class ButtonLayer extends AnimationLayer
{
	var toggleButton; // トグルボタンとして初期化されてる
	var _toggle;      // トグル状態

	var groupName;    // ラジオボタンの場合のグループ指定
	var halftone;     // disable 時に半透明にする
	var eventTransparent = false;	// 事件是否穿透 一般用作ltLayer的场合，注意一旦开启无法处理任何事件

	property toggle {
		getter() { return _toggle; }
		setter(v) {
			if(!toggleButton)return;
			_toggle = v;
			update();
		}
	}
	var Butt_imageLoaded = false; // 画像が読み込まれたか  是否已加载画像
	var Butt_mouseOn = false; // レイヤ内にマウスがあるか 鼠标是否移入
	var Butt_mouseDown = false; // マウスボタンが押されているか 按钮是否按下
	var Butt_color = clNone;
	var Butt_oncolor = clNone;
	var Butt_caption = ''; // ボタンのキャプション
	var Butt_captionColor = 0x000000; // キャプションの色
	var Butt_keyPressed = false;
	var Butt_showFocusImage = false;
	function ButtonLayer(win, par, toggle=false)
	{
		super.AnimationLayer(win, par);

		if(typeof win.cursorPointed !== "undefined")
			cursor = win.cursorPointed;

		hitType = htMask;
		hitThreshold = 0;
		focusable = true; // フォーカスを得られる
		toggleButton = toggle; // トグルボタンかどうか
	}

	function finalize()
	{
		super.finalize(...);
	}

	function assign(src)
	{
		// src の情報をこのボタンレイヤにコピー
		assignImages(src, true);
		name = src.name;
		Butt_imageLoaded = src.Butt_imageLoaded;
		Butt_color = src.Butt_color;
		Butt_oncolor = src.Butt_oncolor;
		Butt_caption = src.Butt_caption;
		Butt_captionColor = src.Butt_captionColor;
		hitThreshold = src.hitThreshold;
		toggleButton = src.toggleButton;
		toggle = src.toggle;
		groupName = src.groupName;
		halftone = src.halftone;
		eventTransparent = src.eventTransparent;
		update();
	}
	//画出不同状态的按钮
	function drawState(s)
	{
		// 状態 s に対応する画像を描画   画出s对应代表状态的按钮
		// s :  0 : 普通の状態     一般状态
		//      1 : ボタンが押された状態 按住状态
		//      2 : ボタンの上にマウスカーソルがある状態  鼠标移上的状态
		//     (3): フォーカスがある場合   有焦点的状态
		if(!enabled)
		{
			s = 0; // 無効状態
		}

		if(Butt_imageLoaded)
		{
			if (halftone) {		//启用半透明时 无效则半透明
				opacity = enabled ? 255 : 128;
			}
			// ボタンイメージが読み込まれている
			// imageLeft = -s * width; 移动按钮图像,因为是把多张图像连在一起，实际上就是做了切换
			try { imageLeft = -s * width - (toggle ? imageWidth / 2: 0); }
			catch (e) { throw new Exception(@"button name:'${name}':${e.message}"); }
		}
		else
		{
			if(Butt_keyPressed) s = 1; // 押されている

			// 枠とキャプションを描画
			// クリア
			face = dfAlpha;
			colorRect(0, 0, width, height, 0, -255);
			// 下地を塗る   填充底层
			if (toggle) {
				if(Butt_oncolor != clNone)
					colorRect(0, 0, width, height, Butt_oncolor, 128);
				else
					colorRect(0, 0, width, height, 0xff0000, 128);
			} else {
				if(Butt_color != clNone)
					colorRect(0, 0, width, height, Butt_color, 128);
			}

			// 文字のサイズを得る  取得文字大小
			var tw, th;
			font.face="宋体";
			tw = font.getTextWidth(Butt_caption);
			th = font.getTextHeight(Butt_caption);
			if(s == 0 || s == 2)  //绘制通常状态 或鼠标移入状态
			{
				// 通常あるいはマウスが上にある
				colorRect(0, 0, width, 1, 0xffffff, 128);
				colorRect(0, 1, 1, height-2, 0xffffff, 128);
				colorRect(width-1, 1, 1, height-1, 0x000000, 128);
				colorRect(1, height-1, width-2, 1, 0x000000, 128);
				drawText((width-tw)>>1, (height-th)>>1, 
					Butt_caption, Butt_captionColor, nodeEnabled?255:128);
			}
			else  //绘制按压状态
			{
				// 押されている
				colorRect(0, 0, width, 1, 0x000000, 128);
				colorRect(0, 1, 1, height-2, 0x000000, 128);
				colorRect(width-1, 1, 1, height-1, 0xffffff, 128);
				colorRect(1, height-1, width-2, 1, 0xffffff, 128);
				drawText(((width-tw)>>1) +1, ((height-th)>>1) +1, 
					Butt_caption, Butt_captionColor, nodeEnabled?255:128);
			}

			if(s != 0) //绘制高亮
				colorRect(2, 2, width-4, height-4, clHighlight, 64); // ハイライトする

			if(focused) //有焦点时加亮
			{
				// フォーカスがあるのでハイライトする
				colorRect(2, 2, width-4, 1, clHighlight, 128);
				colorRect(2, 3, 1, height-5, clHighlight, 128);
				colorRect(3, height-3, width-5, 1, clHighlight, 128);
				colorRect(width-3, 3, 1, height-6, clHighlight, 128);
			}
		}
	}

	function loadImages(elm)
	{
		var storage = elm.storage, key = elm.key;
		// 画像を読み込む
		 if (toggle) {
            toggleButton = true;
            var temp = getTemporary();
            temp.loadImages(storage, key);
            var w = temp.imageWidth;
            super.width  = w \ (Butt_showFocusImage ? 4 : 3);
            imageWidth   = w * 2;
            copyRect(w, 0, temp, 0, 0, temp.imageWidth, temp.imageHeight);
        } else {
            super.loadImages(elm);
            super.width = imageWidth \ (Butt_showFocusImage ? 4 : 3);//一张图片同时包含了多个状态图像
        }
		super.height = imageHeight;
		callOnPaint = true;
		Butt_imageLoaded = true;
	}
	function makeToggle() {
		var w = width, h = imageHeight;
		var base = w * (Butt_showFocusImage ? 4 : 3);
		imageWidth *= 2;
		copyRect(base + 0,   0, this, w,   0, w, h);
		copyRect(base + w,   0, this, 0,   0, w, h);
		copyRect(base + w+w, 0, this, w+w, 0, w, h);
		copyRect(base + w*3, 0, this, w*3, 0, w, h) if Butt_showFocusImage;
		toggleButton = true;
	}

// offsを考慮してボタンをコピーする
	function _copyButton(w, h, num, temp) {
		var cw = temp.imageWidth, ch = temp.imageHeight;

		// 隣にハミ出さないように調整
		if (cw > w) cw = w ;
		if (ch > h) ch = h ;
		// コピーする
		copyRect(w*num, 0, temp, 0, 0, cw, ch);
	}

    /**
     * 分離ボタン画像の読み込み  以分离按钮图像的形式导入  
     */
    function loadButtons(normal, over, on, focus,toggle=false) {
        var temp = window.temporaryLayer;
        if (toggle) {
			toggleButton = true;
		}
        showFocusImage = (focus !== void);
        temp.loadImages(normal);
        var w = temp.imageWidth;
        var h = temp.imageHeight;
        super.width  = w;
        super.height = h;
        imageWidth  = w * (Butt_showFocusImage ? 4 : 3) * (toggleButton ? 2:1);
        imageHeight = h;
        callOnPaint = true;
        Butt_imageLoaded = true;
		var base = toggleButton ? (Butt_showFocusImage ? 4 : 3) : 0;

        
		fillRect(0, 0, imageWidth, imageHeight, 0);
		_copyButton(w, h, base + 0, temp);
		
		 temp.loadImages(on) if (on !== void);
		_copyButton(w, h, base + 1, temp);

		temp.loadImages(over) if (over !== void);
		_copyButton(w, h, base + 2, temp);

        if (Butt_showFocusImage) {
			temp.loadImages(focus);
			_copyButton(w, h, base + 3, temp);
		}
    }

	/** 
	* @description: 
	* @param w	单张图片的宽度
	* @param h	单张图片的高度
	* @param num	图片张数，乘以宽度决定复制到哪个位置
	* @param temp	临时图层
	* @param ox		偏移xy值
	* @param oy
	* @param cx		起始坐标(来源图层的)
	* @param cy
	* @param cw		复制的高宽
	* @param ch
	* @return 
	*/
	function _copyButton2(w, h, num, temp, ox, oy, cx = 0, cy = 0, cw, ch) {
		cw = temp.imageWidth  if (cw === void);
		ch = temp.imageHeight if (ch === void);
		// 隣にハミ出さないように調整
		if (ox + cw > w) cw = w - ox;
		if (oy + ch > h) ch = h - oy;
		// コピーする
		operateRect(w*num + ox, oy, temp, cx, cy, cw, ch);
	}

	// uistatesを取得しつつボタンコピーをする  从ui信息中匹配状态并复制到当前按钮上	num复制的图片的张序号  uiinfo ui信息 nomatch找不到匹配的ui信息时使用的信息， list尝试匹配的键名
	function _copyButtonUIStates(num, uiinfo, nomatch, list*) {
		var match = nomatch;
		with (uiinfo) {
			// マッチする state を取得
			for (var s, i = 0; i < list.count; i++)
				if ((s = .uistates[list[i]]) !== void) { match = s; break; }

			// ボタン画像があればコピーする
			if (match !== void && match.storage != "") {
				var temp = window.temporaryLayer;
				temp.loadImages(match.storage);
				_copyButton2(.width, .height, num, temp, match.ox, match.oy,
							 match.cx, match.cy, match.cw, match.ch);//这些参数都可以为空 
			}
		}
		return match;
	}
		/**
	 * ボタン画像UI情報の読み込み
	 */
	function loadUIInfo(uiinfo, noclear = false) {
		var states = uiinfo.uistates;
		
		if (states === void) {
			throw new Exception("The portrait information is invalid.:" + uiinfo.name);
		}
		
		// トグルボタン用
		if (uiinfo.class == "toggle" || uiinfo.groupName != "") {
            toggleButton = true;
		}
		
		// ラジオボタン用
		groupName = uiinfo.groupName;
		halftone = uiinfo.halftone;
		
		showFocusImage = (states.focus !== void);

		var w = uiinfo.width;
		var h = uiinfo.height;
		super.width  = w;
		super.height = h;
		imageWidth  = w * (Butt_showFocusImage ? 4 : 3) *( toggleButton ? 2: 1);
		imageHeight = h;
		callOnPaint = true;
		Butt_imageLoaded = true;
		fillRect(0, 0, imageWidth, imageHeight, 0) if (!noclear);

		// ボタン画像をコピーする
		var normal, over;
		normal = _copyButtonUIStates(0, uiinfo, void, "off", "normal_off", "normal"); //正常状态
		over   = _copyButtonUIStates(2, uiinfo, normal,        "over_off", "over");//悬浮状态
		_copyButtonUIStates(1, uiinfo, over,            "on_off", "on");//点击状态
		if (Butt_showFocusImage)
			_copyButtonUIStates(3, uiinfo, over,         "focus_off", "focus");

		// トグルボタン用	toggle button 用的
		if (toggleButton) {
			var base = Butt_showFocusImage ? 4 : 3;
			normal = _copyButtonUIStates(base+0, uiinfo, void, "normal_on", "on", "over", "normal");
			over   = _copyButtonUIStates(base+2, uiinfo, normal, "over_on", "over");
			_copyButtonUIStates(base+1, uiinfo, over,     "on_on", "on");
			if (Butt_showFocusImage)
				_copyButtonUIStates(base+3, uiinfo, over,  "focus_on", "focus");
		}
	}
    
	function discardImage()
	{
		// 画像を破棄し、文字ボタンレイヤとして動作するようにする
		Butt_imageLoaded = false;
		imageLeft = imageTop = 0;
		update();
	}

	function onMouseDown(x, y, button)
	{
		// onMouseDown イベントハンドラ
        if (button == mbLeft) {
            Butt_mouseDown = true;
            focus();
            update();
        }
		super.onMouseDown(...);
	}

	function onMouseUp()
	{
		// onMouseUp イベントハンドラ
		Butt_mouseDown = false;
		if(toggleButton)
			toggle = !toggle;
		else update();
		super.onMouseUp(...);
	}

	function onHitTest(x,y,b){    
		if (eventTransparent || !enabled) 		//事件透过 不会命中 不作任何处理
			return super.onHitTest(x,y,false);
		return super.onHitTest(x,y,b);
	}

	function onClick()
	{
		// onClick イベントハンドラ
		super.onClick(...);
	}
	//	根据现在的状态进行绘制
	function draw()
	{
		// 現在の状態にあわせて描画を行う   以现在的状态绘制按钮
		if(Butt_mouseDown) drawState(1);
		else if(Butt_mouseOn) drawState(2);
		else if(Butt_showFocusImage && focused) drawState(3);
		else drawState(0);
	}

	function onPaint()
	{
		// 描画の直前に呼ばれる   绘制前呼叫此函数
		super.onPaint(...);
		draw();
	}

	function onMouseEnter()
	{
		// マウスがレイヤ領域内に入った
        if (!Butt_mouseOn) {
			Butt_mouseOn = true;
			update();
		}
		super.onMouseEnter(...);
	}

	function onMouseLeave()
	{
		// マウスがレイヤ領域から出ていった
		if (Butt_mouseOn || Butt_mouseDown) {
			Butt_mouseOn = false;
			Butt_mouseDown = false;
			update();
		}
		super.onMouseLeave(...);
	}

	function onNodeDisabled()
	{
		// レイヤのノードが不可になった
		super.onNodeDisabled(...);
		if (Butt_mouseDown) {
			Butt_mouseDown = false;
		}
		update();
	}

	function onNodeEnabled()
	{
		// レイヤのノードが有効になった
		super.onNodeEnabled(...);
		update();
	}

	function onFocus()
	{
		// フォーカスを得た
		super.onFocus(...);
		if (!Butt_mouseOn) {
			Butt_mouseOn = true;
			update();
		}
	}

	function onBlur()
	{
		// フォーカスを失った
		super.onBlur(...);
		if (Butt_mouseOn || Butt_mouseDown) {
			Butt_mouseOn = false;
			Butt_mouseDown = false;
			update();
		}
	}

	function onKeyDown(key, shift, process)
	{
		// キーが押された
		if(process)
		{
			if(key == VK_RETURN || key == VK_SPACE)
			{
				// スペースキーまたはエンターキー
				Butt_keyPressed = true;
				update();
				super.onKeyDown(key, shift, false); // 処理をしたのでprocessにfalseを渡す
			}
			else
			{
				super.onKeyDown(...);
			}
		}
		else
		{
			// process が false の場合は処理は行わない
			super.onKeyDown(...);
		}
	}

	function onKeyUp(key, shift, process)
	{
		// キーが離された
		if(process)
		{
			if(key == VK_RETURN || key == VK_SPACE)
			{
				// スペースキーまたはエンターキー
				var flag = Butt_keyPressed;
				Butt_keyPressed = false;
				update();
				super.onKeyUp(key, shift, false);
				if(flag) onClick(width \ 2, height \ 2); // クリック動作
			}
			else
			{
				super.onKeyUp(...);
			}
		}
		else
		{
			super.onKeyUp(...);
		}
	}

	function onKeyPress(key, shift)
	{
		super.onKeyPress(...);
	}


	property width
	{
		setter(x)
		{
			super.width = x;
			imageWidth = x;
			Butt_imageLoaded = false;
			update();
		}
		getter
		{
			return super.width;
		}
	}

	property height
	{
		setter(x)
		{
			super.height = x;
			imageHeight = x;
			Butt_imageLoaded = false;
			update();
		}
		getter
		{
			return super.height;
		}
	}

	function setSize(w, h)
	{
		super.setSize(w, h);
		setImageSize(w, h);
		Butt_imageLoaded = false;
		update();
	}

	property caption
	{
		setter(x)
		{
			Butt_caption = x;
			update();
		}
		getter
		{
			return Butt_caption;
		}
	}

	property color
	{
		setter(x)
		{
			Butt_color = int x;
			update();
		}
		getter
		{
			return Butt_color;
		}
	}

	property oncolor
	{
		setter(x)
		{
			Butt_oncolor = int x;
			update();
		}
		getter
		{
			return Butt_oncolor;
		}
	}
    
	property captionColor
	{
		setter(x)
		{
			Butt_captionColor = int x;
			update();
		}
		getter
		{
			return Butt_captionColor;
		}
	}

	property showFocusImage
	{
		setter(x) { Butt_showFocusImage = x; }
		getter { return Butt_showFocusImage; }
	}
}


